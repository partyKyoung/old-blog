{"version":3,"file":"component---src-pages-tags-tsx-3ba64595e559fd3c2b43.js","mappings":"4LAgBA,MAAMA,EAAW,CACfC,KAAI,CAAAC,KAAC,UAADC,OAAC,wKAUP,MAnBA,SAAYC,GAA4B,IAA3B,IAAEC,KAAQC,GAAcF,EACnC,OACEG,EAAAA,EAAAA,IAAA,QAAAC,EAAAA,EAAAA,GAAA,CAAMC,IAAKT,EAASC,MAAUK,GAC3BD,EAGP,ECMA,MAAML,EAAW,CACfK,IAAK,CACH,YAAe,CACbK,MAAO,UACPC,gBAAiB,oCACjBC,mBAAoB,0BACpBC,mBAAoB,QACpBC,yBAA0B,0CAC1BC,gBAAiB,QAKvB,MArBA,SAAgBX,GAAkC,IAAjC,KAAEY,EAAI,IAAEX,KAAQC,GAAcF,EAC7C,OACEG,EAAAA,EAAAA,IAACU,EAAAA,KAAI,CAACC,GAAIF,IACRT,EAAAA,EAAAA,IAACY,GAAGX,EAAAA,EAAAA,GAAA,CAACH,IAAKA,EAAKI,IAAKT,EAASK,KAASC,IAG5C,ECJA,MAAMN,EAAW,CACbC,KAAI,CAAAC,KAAC,UAADC,OAAC,4CAOT,MAdA,SAAiBC,GAA+B,IAA9B,SAACgB,KAAad,GAAaF,EACzC,OACIG,EAAAA,EAAAA,IAAA,OAAAC,EAAAA,EAAAA,GAAA,GAASF,EAAK,CAAEG,IAAKT,EAASC,OAAOmB,EAE7C,ECHA,MALaC,OAAOC,OAAOC,EAAU,CACjCC,QAAO,EACPL,IACJ,G,oHCmDA,MAAMnB,EAAW,CACfC,KAAI,CAAAC,KAAE,SAAFC,OAAE,qBAGNsB,OAAM,CAAAvB,KAAE,UAAFC,OAAE,sEAMRE,IAAG,CAAAH,KAAE,QAAFC,OAAE,oCAsBMuB,EAAeA,KAAMnB,EAAAA,EAAAA,IAAA,aAAO,aAEzC,UA1EA,SAAiBoB,GAOd,IANDC,MACEC,mBAAmB,MAAEC,GACrBC,MACEC,cAAc,MAAEC,MAGrBN,EAUC,OATAO,QAAQC,IAAIL,EAAO,SAUjBvB,EAAAA,EAAAA,IAAC6B,EAAAA,EAAc,MACb7B,EAAAA,EAAAA,IAAC8B,EAAAA,EAAS,CAAC5B,IAAKT,EAASC,OACvBM,EAAAA,EAAAA,IAAC+B,EAAAA,EAAK,KACHR,EAAMS,QAAU,IAAKhC,EAAAA,EAAAA,IAAC+B,EAAAA,EAAME,UAAS,CAAC/B,IAAKT,EAASyB,SACpDK,EAAMS,OAAS,IACdhC,EAAAA,EAAAA,IAACkC,EAAAA,EAAI,KACFX,EAAMY,KAAKrC,IACVE,EAAAA,EAAAA,IAACkC,EAAAA,EAAKjB,QAAO,CACXmB,IAAKtC,EAAIuC,WACTnC,IAAKT,EAASK,IACdW,KAAI,SAAWX,EAAIuC,WACnBvC,IAAQA,EAAIuC,WAAU,KAAKvC,EAAIwC,WAAU,WAS3D,C","sources":["webpack://kyoungah-dev-blog/./src/commons/components/Tags/Tag.tsx","webpack://kyoungah-dev-blog/./src/commons/components/Tags/LinkTag.tsx","webpack://kyoungah-dev-blog/./src/commons/components/Tags/TagsRoot.tsx","webpack://kyoungah-dev-blog/./src/commons/components/Tags/index.tsx","webpack://kyoungah-dev-blog/./src/pages/tags.tsx"],"sourcesContent":["import { css } from '@emotion/react';\n\nimport type { HTMLAttributes } from 'react';\n\ntype Props = {\n  tag: string;\n} & HTMLAttributes<HTMLSpanElement>;\n\nfunction Tag({ tag, ...props }: Props) {\n  return (\n    <span css={cssProps.root} {...props}>\n      {tag}\n    </span>\n  );\n}\n\nconst cssProps = {\n  root: css({\n    display: 'inline-block',\n    backgroundColor: 'hsla(var(--palette-blue-10), 100%)',\n    borderRadius: 4,\n    color: 'hsla(var(--palette-gray-80), 100%)',\n    fontSize: 14,\n    padding: '4px 16px',\n  }),\n};\n\nexport default Tag;\n","import type { HTMLAttributes } from 'react';\n\nimport { Link } from 'gatsby';\nimport { css } from '@emotion/react';\n\nimport Tag from './Tag';\n\ntype Props = {\n  link: string;\n  tag: string;\n} & HTMLAttributes<HTMLSpanElement>;\n\nfunction LinkTag({ link, tag, ...props }: Props) {\n  return (\n    <Link to={link}>\n      <Tag tag={tag} css={cssProps.tag} {...props} />\n    </Link>\n  );\n}\n\nconst cssProps = {\n  tag: {\n    ['a:hover &']: {\n      color: '#FFFFFF',\n      backgroundColor: 'hsla(var(--palette-blue-50), 60%)',\n      transitionProperty: 'color, background-color',\n      transitionDuration: '0.25s',\n      transitionTimingFunction: 'cubic-bezier(0.455, 0.03, 0.515, 0.955)',\n      transitionDelay: '0s',\n    },\n  },\n};\n\nexport default LinkTag;\n","import { css } from '@emotion/react';\n\nimport type { HTMLAttributes, ReactNode } from 'react';\n\ntype Props = {\n    children: ReactNode;\n} & HTMLAttributes<HTMLDivElement>;\n\nfunction TagsRoot({children, ...props}: Props) {\n    return (\n        <div {...props} css={cssProps.root}>{children}</div>\n    )\n}\n\nconst cssProps = {\n    root: css({\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: '8px 6px',\n    })\n}\n\nexport default TagsRoot;","import LinkTag from \"./LinkTag\";\nimport Tag from \"./Tag\";\nimport TagsRoot from \"./TagsRoot\";\n\nconst Tags = Object.assign(TagsRoot, {\n    LinkTag,\n    Tag\n});\n\nexport default Tags;","import { graphql } from 'gatsby';\nimport { useInfiniteQuery } from '@tanstack/react-query';\nimport { css } from '@emotion/react';\n\nimport type { HeadFC } from 'gatsby';\n\nimport Container from '../commons/components/Container';\nimport Tags from '../commons/components/Tags';\nimport Posts from '../commons/components/Posts';\nimport LayoutTemplate from '../commons/templates/LayoutTemplate';\n\nasync function fetchPosts({ pageParam }: { pageParam: number }) {\n  const response = await fetch(`../jsons/page${pageParam}.json`);\n  const page = await response.json();\n\n  return page;\n}\n\nfunction TagsPage({\n  data: {\n    allMarkdownRemark: { group },\n    site: {\n      siteMetadata: { title },\n    },\n  },\n}) {\n  console.log(group, '나와라요');\n\n  // const { data } = useInfiniteQuery({\n  //   queryKey: ['posts'],\n  //   queryFn: fetchPosts,\n  //   initialPageParam: 1,\n  //   getNextPageParam: (lastPage) => lastPage.nextCursor,\n  // })\n\n  return (\n    <LayoutTemplate>\n      <Container css={cssProps.root}>\n        <Posts>\n          {group.length <= 0 && <Posts.EmptyPost css={cssProps.center} />}\n          {group.length > 0 && (\n            <Tags>\n              {group.map((tag) => (\n                <Tags.LinkTag\n                  key={tag.fieldValue}\n                  css={cssProps.tag}\n                  link={`/tags/${tag.fieldValue}`}\n                  tag={`${tag.fieldValue} (${tag.totalCount})`}\n                />\n              ))}\n            </Tags>\n          )}\n        </Posts>\n      </Container>\n    </LayoutTemplate>\n  );\n}\n\nconst cssProps = {\n  root: css({\n    position: 'relative',\n  }),\n  center: css({\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n  }),\n  tag: css({\n    fontSize: 16,\n    padding: '8px 16px',\n  }),\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(filter: { frontmatter: { publish: { eq: true } } }) {\n      group(field: { frontmatter: { tags: SELECT } }) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n\nexport const Head: HeadFC = () => <title>Home Page</title>;\n\nexport default TagsPage;\n"],"names":["cssProps","root","name","styles","_ref","tag","props","___EmotionJSX","_extends","css","color","backgroundColor","transitionProperty","transitionDuration","transitionTimingFunction","transitionDelay","link","Link","to","Tag","children","Object","assign","TagsRoot","LinkTag","center","Head","_ref2","data","allMarkdownRemark","group","site","siteMetadata","title","console","log","LayoutTemplate","Container","Posts","length","EmptyPost","Tags","map","key","fieldValue","totalCount"],"sourceRoot":""}