{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/2019-01-20-typescript-react/","webpackCompilationHash":"69b55ce51e98823e248b","result":{"data":{"site":{"siteMetadata":{"title":"Kyoungah's dev blog.","author":"Kyoungah"}},"markdownRemark":{"id":"0bd43813-0c21-57b4-81fa-de6b1a229d90","excerpt":"TypeScript에 익숙해질 겸 기존에 진행하고 있던 프로젝트를 TypeScript으로 마이그레이션 해보기로 했다.\ncreate-react-app v2로 생성한 프로젝트면 간단하게 마이그레이션 할 수 있다. 먼저 위의 모듈들을 install 해주자. App.tsx 위의 App…","html":"<p>TypeScript에 익숙해질 겸 기존에 진행하고 있던 프로젝트를 TypeScript으로 마이그레이션 해보기로 했다.\ncreate-react-app v2로 생성한 프로젝트면 간단하게 마이그레이션 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @types/node @types/react @types/react-dom\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev typescript awesome-typescript-loader source-map-loader @types/jest</code></pre></div>\n<p>먼저 위의 모듈들을 install 해주자.</p>\n<h3>App.tsx</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">:</span> Props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>TypeScript<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 App 컴포넌트 처럼 컴포넌트 파일들의 확장자를 tsx로 바꾸고 Props, State 타입을 지정해주면 된다.\n마지막으로 index.js 파일을 index.tsx로 바꾸면 마이그레이션이 간단하게 끝난다.</p>\n<p>여기까지는 React 공식문서를 따라 해서 문제가 없었는데 나는 yarn eject로 프로젝트 의존성을 풀어놔서 문제가 잠시 생겼었다.\n컴포넌트 import시 컴포넌트 경로를 적을 때 tsx 확장자를 적지 않으면 컴포넌트를 제대로 불러오지 못하는 것이었다.</p>\n<p><img src=\"https://facebook.github.io/create-react-app/docs/adding-typescript\" alt=\"컴포넌트를 import할 때 tsx 확장자가 없으면 프로젝트가 제대로 실행되지 않았다.\"></p>\n<p>빨간줄이 거슬려서 해결법을 찾아보았다.</p>\n<h3>paths.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> moduleFileExtensions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"web.mjs\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"mjs\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"web.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"web.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"web.tsx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"tsx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"web.jsx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"jsx\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>paths.js 파일을 확인해보면 분명 확장자에 ts, tsx가 있는데 제대로 확장자를 빼면 컴포넌트를 제대로 불러오지 않는것이 이상해서 webpack 설정을 보았다.</p>\n<h3>webpack.config.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">/* 생략 */</span>\n\n      extensions<span class=\"token punctuation\">:</span> paths<span class=\"token punctuation\">.</span>moduleFileExtensions<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ext</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ext<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// .filter(ext => useTypeScript || !ext.includes(\"ts\")),</span>\n\n      <span class=\"token comment\">/* 생략 */</span></code></pre></div>\n<p>resolve 옵션은 webpack이 알아서 경로나 확장자를 처리할 수 있게 도와준다. extensions에 넣은 확장자들은 웹팩에서 알아서 처리해주기 때문에 파일 경로를 입력할 때 확장자를 적을 필요가 없어진다.\n확인 해보니 Array.filter 메소드로 TypeScript 파일들을 다 걸러내고 있길래 해당 부분을 주석처리 해주었더니 정상 작동 되었다.</p>\n<p>진작 webpack 설정을 봤었어야 했는데 삽질을 좀 많이 했다. 흑흑... 그래도 무사히 마이그레이션 성공!</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://facebook.github.io/create-react-app/docs/adding-typescript\">Adding TypeScript</a></li>\n</ul>","frontmatter":{"title":"create-react-app으로 생성한 React 프로젝트 TypeScript로 마이그레이션 하기","date":"January 22, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-01-20-typescript-react/"}}}