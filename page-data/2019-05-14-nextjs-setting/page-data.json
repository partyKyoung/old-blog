{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/2019-05-14-nextjs-setting/","webpackCompilationHash":"4dc2e49b464d9c0eee79","result":{"data":{"site":{"siteMetadata":{"title":"Kyoungah's dev blog.","author":"Kyoungah"}},"markdownRemark":{"id":"9854d9e2-d484-552f-8905-80f8fdd149e4","excerpt":"TypeScript + create-react-app으로 생성된 프로젝트에 Next.js를 적용해보자. create-next-app 이라는 훌륭한 보일러플레이트 도구가 있으니 이걸로 프로젝트를 새로 생성해서 작업하던 것을 다 옮겨도 되지만 Next.js…","html":"<p>TypeScript + create-react-app으로 생성된 프로젝트에 Next.js를 적용해보자. <a href=\"https://www.npmjs.com/package/create-next-app\">create-next-app</a> 이라는 훌륭한 보일러플레이트 도구가 있으니 이걸로 프로젝트를 새로 생성해서 작업하던 것을 다 옮겨도 되지만 Next.js 설정법도 알아볼겸 기존 프로젝트에 Next.js를 한번 적용해 볼 것이다.</p>\n<h2>모듈 설치</h2>\n<p>next를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn add next @types/next</code></pre></div>\n<h2>package.json</h2>\n<p>package.json에 next를 실행시키는 명령어를 적어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next\"</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>tsconfig.json</h2>\n<p>8.1.0 버전까지는 next.js에서 typescript를 사용하려면 next-typescrip라는 플러그인을 추가로 사용해야했으나 9버전 부터는 tsconfig.json 파일만 생성해주면 TypeScript를 사용할 수 있게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"allowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// js파일(js, jsx)도 컴파일 대상에 포함시킨다.</span>\n    <span class=\"token property\">\"alwaysStrict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 엄격모드에서 구문을 분석한다.</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* import * as 모듈 from ... -> import 모듈 from ... 이런 식으로 import 할 수 있게 해준다. */</span>\n    <span class=\"token property\">\"isolatedModules\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* 각 파일을 별도의 모듈로 변환해준다. */</span>\n    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preserve\"</span> <span class=\"token comment\">/* Preserves jsx outside of Next.js. */</span>\n    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"es2017\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* List of library files to be included in the type checking. */</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 컴파일된 모듈의 결과물을 어떤 모듈 시스템으로 할지 결정한다.</span>\n    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span> <span class=\"token comment\">/* Determine how modules get resolved. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noEmit\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Do not emit outputs. Makes sure tsc only does type checking. */</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">/* Strict Type-Checking Options, optional, but recommended. */</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Report errors for fallthrough cases in switch statement. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Report errors on unused locals. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Report errors on unused parameters. */,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 모든 엄격한 타입 검사 옵션을 활성화한다.</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esnext\"</span> <span class=\"token comment\">// 컴파일 결과물을 js의 어떤 버전으로 할 것인지 지정한다.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>pages/index.js</h2>\n<p>첫 페이지를 만들어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">const</span> Index<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">StatelessComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Index Page<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Index</code></pre></div>\n<p>nextjs를 사용하려면 pages폴더가 무조건 있어야 한다. 이 pages안에 라우팅 url과 동일한 이름의 컴포넌트를 생성해야 한다. pages 컴포넌트가 next 라우팅과 동일하게 mapping 되기 때문에 이 규칙은 반드시 지켜야한다.</p>\n<h2>실행</h2>\n<p>아래의 명령어로 실행하면 방금 작성한 첫 페이지가 뜨는게 보일 것이다. Next.js 설정이 끝났으니 이제 프로젝트를 Next.js 구조에 맞게 옮기면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm run dev</code></pre></div>\n<h2>next 8.1에서 9버전대로 업그레이드 하면서 났던 오류들.</h2>\n<h3>error TS2349: Cannot invoke an expression whose type lacks a call signature.</h3>\n<p>tsconfig.json에서 esModuleInterop를 true로 줬기 때문에 나는 오류인것 같다. 아래처럼 import 문을 고쳐주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// import * as next from 'next'</span>\n\n<span class=\"token keyword\">import</span> next <span class=\"token keyword\">from</span> <span class=\"token string\">\"next\"</span></code></pre></div>\n<h3>Cannot re-export a type when the '--isolatedModules' flag is provided.</h3>\n<p>이것 역시 tsconfig.json에서 isolatedModules 옵션을 true로 해줬기 때문에 나는 것 같다. 아래 처럼 export 문을 고쳐주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// export { SomeType };</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SomeType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./types\"</span>\n<span class=\"token keyword\">export</span> type SomeType <span class=\"token operator\">=</span> SomeType</code></pre></div>\n<h3>Module '\"node_modules/next/router\"' has no exported member 'WithRouterProps'.</h3>\n<p>WithRouterProps를 import 할 때 나는 오류 인데 아래처럼 고쳐주면 된다. import 문을 고쳐주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// import { WithRouterProps } from 'next/router';</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> WithRouterProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/dist/client/with-router\"</span></code></pre></div>\n<h3>Argument of type 'ConnectedComponentClass&#x3C;FunctionComponent<PageTemplateProps>, Pick&#x3C;PageTemplateProps, \"children\" | \"gaId\">>'</h3>\n<p>이건 정확히 원인을 모르겠는데 withRouter랑 connect 함수를 compose로 묶어주면 해결된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// withRouter(connnect()()) => .. 생략</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  withRouter<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Container<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>마무리</h2>\n<p>처음 이 글을 썼을 땐 회사에서 Next.js를 쓰고 있기도 하고 한번 쯤 써보고 싶었던 프레임워크라 집에서 혼자 작업하던 토이 프로젝트에도 한번 Next.js를 적용해봤었는데 지금은 다시 도로 걷은 상태이다.</p>\n<p><a href=\"https://github.com/zeit/next.js/issues/7496\">Next 8.1 버전은 안드로이드 4.x 버전에서 제대로 작동이 안하는 이슈</a>가 9버전대에서는 수정되어서 9버전대로 업그레이드 했는데 이번엔 <a href=\"https://github.com/zeit/next.js/issues/7894\">빌드 시에 firebase/firestore 모듈과 계속 충돌이 나는 이슈</a>가 발생했다. 혼자서라도 고쳐 보게다고 이거 가지고 한 2주를 질질끌다가 다행히 회사에서 프로젝트 구조를 마이크로서비스 아키텍처로 바꾸면서 큰 변화가 일어나 프론트단에서도 Next.js를 걷어내기로 하고 지금은 내 토이 프로젝트에서도 걷어냈다.</p>\n<p>너무 오픈소스에 의존하다 보면 오픈소스에 이슈나 버그가 있을 때 이것이 걸림돌이 될 것이다 라고는 생각했는데 직접 겪어보니 가슴 아팠다 ㅠ. 그렇다고 오픈소스를 사용하는게 나쁜건 아니니 오픈소스를 사용할 때 이 오픈소스가 어떻게 작동하는지 좀 더 자세히 알아보고 소스를 조금씩이라도 봐놓는 버릇을 들여놓으면 오픈소스에 이슈가 발생했을 때 도움이 될 것 같다.</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://github.com/zeit/next-plugins/tree/master/packages/next-typescript\">zeit/next-plugins</a></li>\n<li><a href=\"https://blueshw.github.io/2018/04/15/why-nextjs/\">[nextjs] nextjs는 어떻게 동작하는가?</a></li>\n</ul>","frontmatter":{"title":"기존 React 프로젝트에 Next.js 마이그레이션 해보기.","date":"May 14, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-05-14-nextjs-setting/"}}}