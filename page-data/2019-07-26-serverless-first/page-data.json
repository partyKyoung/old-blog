{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/2019-07-26-serverless-first/","webpackCompilationHash":"0b19d7a726d158ee4bf0","result":{"data":{"site":{"siteMetadata":{"title":"Kyoungah's dev blog.","author":"Kyoungah"}},"markdownRemark":{"id":"6af0e7a7-8d21-5586-8423-8050c5b1eb7d","excerpt":"서버리스 서버에서 처리하는 작업을 클라우드 기반의 서비스로 처리해서 서버 구축 및 관리 비용을 줄이는 구조. Faas (Function-as-a-Service) 함수를 서비스로 제공하는 형태. 등록한 함수는 특정 이벤트가 발생했을 때만 실행된다. ex) aws lambda, azure…","html":"<h2>서버리스</h2>\n<p>서버에서 처리하는 작업을 클라우드 기반의 서비스로 처리해서 서버 구축 및 관리 비용을 줄이는 구조.</p>\n<h2>Faas (Function-as-a-Service)</h2>\n<p>함수를 서비스로 제공하는 형태. 등록한 함수는 특정 이벤트가 발생했을 때만 실행된다.</p>\n<p>ex) aws lambda, azure functions, goolge cloud functions</p>\n<h3>장점</h3>\n<ul>\n<li>서버의 스케일링을 직접 할 필요 없다. 즉 확장성이 뛰어나다.</li>\n<li>서버 인프라 관리, 보안에 신경 쓸 필요가 없다. 이 때문에 개발 기간이 엄청 단축된다.</li>\n<li>\n<p>서버 비용을 절약할 수 있다.</p>\n<ul>\n<li>보통 서버는 누가 접속하던 말던 계속 서버가 켜져 있기 떄문에 불필요한 비용이 빠져나가지만 서버리스는 함수를 실행할 때만 비용이 빠져나가기 때문이다.</li>\n</ul>\n</li>\n</ul>\n<h3>단점</h3>\n<ul>\n<li>함수로 쪼개서 작업하기 때문에 함수에서 사용할 수 있는 자원에 제한이 있다.</li>\n<li>FaaS 제공사의 의존도가 강하다. 만약 FaaS 아키텍처 인프라 자체에 문제가 생길 경우 직접 컨트롤 할 수 없다. 가능성은 없지만 FaaS 제공사가 망한다면 뒷감당 역시 어렵다.</li>\n<li>1밀리초의 응답 시간도 이슈가 되는 분야에서는 처리 속도가 못 쫒아간다.</li>\n<li>\n<p>함수들은 무상태적이기 때문에 로컬 데이터를 사용할 수 없다. </p>\n<ul>\n<li>데이터를 로컬 스토리지에서 읽고 쓸 수 없다.</li>\n</ul>\n</li>\n</ul>\n<h2>serverless 프레임워크</h2>\n<p>lambda에서 실행하는 코드를 deploy 하는 과정을 굉장히 쉽게 해준다.</p>\n<h3>serverless 설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// serverless 프레임워크를 전역으로 설치한다.\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g serverless</code></pre></div>\n<h3>serverless 프로젝트 생성</h3>\n<p>Node.js 및 AWS가 익숙하므로 <code class=\"language-text\">aws-nodejs</code>라는 템플릿을 이용하여 프로젝트를 만들 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// 템플릿 종류를 입력하지 않고 명령어를 실행하면 오류가 나면서 사용할 수 있는 템플릿 종류가 출력된다. \nserverless create --template aws-nodejs</code></pre></div>\n<p>AWS lambda에 배포를 하기 위해서는 <a href=\"https://velopert.com/3549\">AWS 사용자 생성 및 추가 설정</a>이 필요하다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">serverless config credentials --provider aws --key 액세스키ID --secret 비밀액세스키</code></pre></div>\n<h3>TypeScript 환경 설정</h3>\n<p>그냥 js로 작업해도 상관없지만 요즘 핫한 TypeScript를 적용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> serverless-webpack serverless-offline ts-loader typescript webpack</code></pre></div>\n<ul>\n<li>serverless-webpack: webpack을 사용해서 lambda 함수를 빌드할 수 있도록 해주는 플러그인.</li>\n<li>serverless-offline: 작성한 함수들을 로컬에서 실행해 볼 수 있도록 도와주는 플러그인.</li>\n<li>ts-loader: webpack에서 사용하는 TypeScript loader.</li>\n</ul>\n<h3>tsconfig.json</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>webpack.config.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> slsw <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'serverless-webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token punctuation\">:</span> slsw<span class=\"token punctuation\">.</span>lib<span class=\"token punctuation\">.</span>webpack<span class=\"token punctuation\">.</span>isLocal <span class=\"token operator\">?</span> <span class=\"token string\">'development'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n  entry<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/server.ts\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    libraryTarget<span class=\"token punctuation\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token string\">\"[name].js\"</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/.tsx?$/</span><span class=\"token punctuation\">,</span>\n      loader<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ts-loader\"</span><span class=\"token punctuation\">,</span>\n      exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    extensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\".tsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".js\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  target<span class=\"token punctuation\">:</span> <span class=\"token string\">'node'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>serverless.yml</h3>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># 생략...</span>\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs10.x\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> ap<span class=\"token punctuation\">-</span>northeast<span class=\"token punctuation\">-</span><span class=\"token number\">2 </span><span class=\"token comment\">## aws region</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>webpack\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>offline\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># server라는 함수가 실행되면 src/server 파일 안의 함수가 실행된다.</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> src/server \n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> / \n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get</code></pre></div>\n<h3>src/server.ts</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ResponseType</span> <span class=\"token punctuation\">{</span>\n  statusCode<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n  body<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">server</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response<span class=\"token punctuation\">:</span> ResponseType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      message<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello, world!'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>실행</h2>\n<p>풀 명령어(?)를 적긴 했지만 sls이라는 단축 명령어로 아래 명령문을 실행할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// 로컬 실행\nserverless offline\n\n// 배포 \nserverless deploy</code></pre></div>\n<p>배포가 완료되면 AWS Lambda, API gateway에서 정상적으로 배포된 것을 확인할 수 있다.</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://futurecreator.github.io/2019/03/14/serverless-architecture/\">서버리스 Serverless 아키텍처 파헤치기</a></li>\n<li><a href=\"https://velopert.com/3549\">Serverless 프레임워크로 서버리스 애플리케이션 생성 및 배포하기</a></li>\n<li><a href=\"https://ndb796.tistory.com/311\">Serverless 프레임워크(Framework)의 기본적인 사용법</a></li>\n<li><a href=\"https://gyuha.tistory.com/515\">Serverless &#x26; Webpack &#x26; Typescript 구성하기</a></li>\n</ul>","frontmatter":{"title":"서버리스와 서버리스 프레임워크.","date":"July 26, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-07-26-serverless-first/"}}}