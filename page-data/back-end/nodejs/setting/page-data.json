{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/back-end/nodejs/setting","webpackCompilationHash":"99047778a664d1d4dbd5","result":{"data":{"markdownRemark":{"html":"<p>Node.js 프로젝트를 만들고 Webpack 설정까지 해보자.</p>\n<h2>시작하기 전에 필요한 것</h2>\n<h3>Node.js</h3>\n<p><a href=\"https://nodejs.org/ko/\">Node.js 공식사이트</a>\n여기서 Node.js 를 설치할 수 있다.</p>\n<h3>NPM 또는 Yarn</h3>\n<p><a href=\"https://www.npmjs.com/\">NPM</a>\nNPM은 Node.js Package Manger의 약자이다. Node.js에서 사용가능한 모듈들을 패키지화시켜 모아놓은 곳 이다. npm으로 원하는 모듈들을 설치하고 관리할 수 있다.</p>\n<p><a href=\"https://yarnpkg.com/lang/en/\">Yarn</a>\nYarn은 의존하는 라이브러리가 많아지면 느려지고 설치하는 시기에 따라 다른 버전을 설치할 가능성이 있는 NPM의 단점을 보완하기 위해 나왔다. npm을 대체할 수 있다.</p>\n<p>NPM의 이슈는 NPM 최신버전에서 해결됐고 속도 차이점은 솔직히 난 잘 못느끼겠다. 이번에 Node.js를 공부하면서 Yarn이 써보고 싶어서 Yarn을 썼는데 딱히 NPM이랑 다른건 없는거 같으니 원하는걸 쓰면 되겠다.</p>\n<h2>작업환경 설정</h2>\n<p>es6 개발환경을 구축하기 위해 webpack이랑 babel을 사용할 것이다.</p>\n<pre><code>yarn init -y\nyarn add --dev webpack webpack-cli babel-loader babel-core babel-preset-env\n</code></pre>\n<p>먼저 yarn init 또는 npm init 으로 package.json 파일을 생성해준 후 webpack과 babel 관련 모듈들을 깔아주자.</p>\n<h3>webpack.config.js</h3>\n<pre><code class=\"language-javascript\">const webpack = require(\"webpack\")\nconst path = require(\"path\")\nconst nodeExternals = require(\"webpack-node-externals\")\n\nmodule.exports = {\n  target: \"node\", // 기본은 web 이기 때문에 꼭 node로 맞춰줘야 한다.\n  externals: [nodeExternals()],\n  entry: {\n    server: \"./src/server.js\",\n  },\n  output: {\n    filename: \"[name].js\",\n    path: path.resolve(__dirname, \"build\"),\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /(node_modules)/, // babel-loader로 트랜스파일시 node_modules는 제외한다.\n        use: {\n          loader: \"babel-loader\",\n          options: {\n            presets: [\"babel-preset-env\"],\n          },\n        },\n      },\n    ],\n  },\n}\n</code></pre>\n<p>server-side에서도 webpack을 사용할 수 있도록 webpack.config.js를 작성했다. webpack-node-externals은 node_modules를 빌드과정에서 제외시키는 역할을 한다.</p>\n<h3>src/server.js</h3>\n<pre><code class=\"language-javascript\">import http from \"http\"\n\nconst server = http.createServer()\nconst port = 3000\n\nserver.listen(port, () => {\n  console.log(\"server start!\", port)\n})\n</code></pre>\n<p>간단하게 서버쪽 소스를 작성했다.</p>\n<h3>package.json</h3>\n<pre><code class=\"language-javascript\">\"scripts\": {\n  \"build\": \"webpack --mode production &#x26;&#x26; node ./build/server.js\"\n},\n</code></pre>\n<p>빌드와 실행을 동시에 하기 위해 script에 build 명령어도 넣어주면 설정은 끝났다.\nwebpack 4 버전 부터는 꼭 --mode (develop or production)를 설정해주어야한다.</p>\n<h2>npm run build</h2>\n<p><img src=\"/images/backend/nodejs-setting-1.png\" alt=\"실행 결과\">\n빌드도 잘되고 실행도 잘된다. 작업환경을 끝냈으니 이제 본격적으로 Node.js 공부를 해보자.</p>\n<p><a href=\"https://github.com/partyKyoung/nodejs-study\">해당 포스트에 작성된 모든 소스는 여기서 확인할 수 있다.</a></p>","frontmatter":{"date":"July 31, 2018","path":"/back-end/nodejs/setting","title":"Node.js 작업환경 설정하기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}