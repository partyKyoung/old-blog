{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/base/algorithms/binary-search","webpackCompilationHash":"306c1024de87b0321d7d","result":{"data":{"markdownRemark":{"html":"<h2>이진탐색</h2>\n<ul>\n<li><strong>탐색</strong>: 배열 형태로 주어진 데이터에서 원하는 값을 가진 데이터를 찾는 문제.</li>\n<li><strong>이진 탐색</strong>: 정렬된 상태의 데이텅에 대해 적용 가능한 효과적인 탐색 방법.</li>\n</ul>\n<h2>탐색 방법</h2>\n<p>배열은 오름차순 정렬 되어 있다고 가정한다.</p>\n<h3>분할</h3>\n<p>배열의 가운데 원소를 기준으로 왼쪽 부분배열과 오른쪽 부분배열로 분할한다. 탐색키 x가 가운데 원소와 같으면 가운데 원소에 해당하는 배열의 인덱스를 반환하고 종료한다.</p>\n<h3>정복</h3>\n<p>x가 가운데 원소보다 작으면 왼쪽 부분배열을 대상으로 이진 탐색을 순환호출 하고, 크면 오른쪽 부분배열을 대상으로 이진 탐색을 순환호출한다. 탐색을 다시 수행할 때마다 탐색 범위가 절반으로 줄어든다.</p>\n<h3>결합.</h3>\n<p>부분배열에 대해서 이진 탐색의 결과가 직접 반환되므로 결과를 결합할 필요가 없다.</p>\n<p><img src=\"/images/base/algorithms-binary-search-1.png\" alt=\"이진 탐색 분할\"></p>\n<h2>알고리즘</h2>\n<h3>재귀함수</h3>\n<pre><code class=\"language-c\">int binarySearch(int arr[], int leftIndex, int rightIndex, int x) {\n  // 탐색 실패\n  if (leftIndex > rightIndex) {\n    return -1;\n  }\n\n  int mid = (leftIndex + rightIndex) / 2;\n\n  if (x == arr[mid]) {\n    return mid;\n  }\n\n  if (x &#x3C; arr[mid]) {\n    // 왼족 배열 탐색\n    return binarySearch(arr, leftIndex, mid - 1, x);\n  } else {\n    // 오른쪽 배열 탐색\n    return binarySearch(arr, mid + 1, rightIndex, x);\n  }\n};\n</code></pre>\n<h3>반복함수</h3>\n<pre><code class=\"language-c\">int binarySearch_Iteration(int arr[], int index, int x) {\n  int leftIndex = 0, rightIndex = index - 1;\n\n  while(leftIndex &#x3C;= rightIndex) {\n    int mid = (leftIndex + rightIndex) / 2;\n\n    if (x == arr[mid]) {\n      return mid;\n    }\n\n    if (x &#x3C; arr[mid]) {\n      // 왼쪽 부분배열 탐색\n      rightIndex = mid - 1;\n    } else {\n      // 오른쪽 부분배열 탐색\n      leftIndex = mid + 1;\n    }\n  }\n\n  // 탐색키가 존재하지 않을 경우\n  return -1;\n};\n</code></pre>\n<p>이진 탐색에서는 분할 될 때마다 입력 크기가 절반으로 감소 하며, 탐색 대상의 개수가 1이 되면 더는 분할이 수행되지 않고 탐색 성공 여부가 결정된다.</p>\n<h2>성능 분석</h2>\n<p>T(n) = 입력 크기 n에 대한 탐색 과정에서의 모든 비교 횟수의 합 = 맨 바깥 수준에서의 비교 횟수 + 순환 호출에서의 비교 횟수.</p>\n<p>맨 바깥 수준에서의 비교 횟수는 상수이므로 1.\n순환 호출에서의 비교 횟수는 비교 할 때마다 절반 씩 데이터를 나누므로 $\\frac{n}{2}$.</p>\n<p>T(n) = T($\\frac{n}{2}$) + O(1)(n > 1), T(1) = 1;\nT(n) = O($logn$)</p>\n<h2>특징</h2>\n<ul>\n<li>입력이 정렬된 리스트에 대해서만 적용이 가능하다.</li>\n<li>\n<p>데이터의 삽입/삭제 연산을 수행하면 데이터의 이동이 발생한다.</p>\n<ul>\n<li>평균 $\\frac{2}{n}$개의 데이터 이동이 발생하므로 삽입/삭제가 빈번한 응용에는 부적합하다.</li>\n</ul>\n</li>\n</ul>\n<h2>Reference</h2>\n<p><a href=\"http://press.knou.ac.kr/goods/textBookView.do?condCmdtCode=9788920026935&#x26;condLscValue=001&#x26;condYr=&#x26;condSmst=\">방송대 컴퓨터과학과 알고리즘 3강</a></p>","frontmatter":{"date":"March 17, 2019","path":"/base/algorithms/binary-search","title":"이진 탐색"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}