{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/base/algorithms/min-mat-mult","webpackCompilationHash":"26a80cebaa4a88426797","result":{"data":{"markdownRemark":{"html":"<h2>연쇄 행렬 곱셈 문제</h2>\n<p>n개의 행렬을 연쇄적으로 곱할 때 최적의 곱셈 순서를 구하는 문제. 즉 최소의 기본 곱셈 횟수를 가진 행렬의 곱셈 순서를 구하는 문제이다.</p>\n<p>i x j 행렬과 j x k 행렬을 곱하는데에는 i x j x k번만큼의 곱셈이 필요하고 그 결과로는 i x k 번의 행렬을 얻는다. 행렬의 곱셈 연산은 결합법칙이 성립하기 때문에 n개의 행렬을 연쇄적으로 곱하는 경우에는 곱하는 순서에 따라 여러 가지 다른 방법으로 계산될 수 있다. 즉 어떤 순서로 곱하느냐에 따라 곱셈 횟수가 달라질 수 있다.</p>\n<p>M1: 30 x 5\nM2: 5 x 20\nM3: 20 x 15\nM4: 15 x 10</p>\n<p>이렇게 행렬이 있다고 가정하면</p>\n<p>M1 (M2 (M3M4)) = (20 x 15 x 10) + (5 x 20 x 10) + (30 x 5 x 10) = 5,500\n(M1M2)(M3M4) = (30 x 5 x 20) + (20 x 15 x 10) + (30 x 20 x 10) - 12,000\nM1( (M2M3) M4) = (5 x 20 x 15) + (5 x 15 x 10 ) + (30 x 5 x 10) = 3,750\n((M1M2) M3 )M4 = (30 x 5 x 20) + (30 x 20 x 15) + (30 x 15 x 10) = 16,500\n(M1 (M2M3))M4 = (5 x 20 x 15) + (30 x 5 x 15) + (30 x 15 x 10) = 6,900</p>\n<p>위와 같은 결과가 나온다. 즉 M1( (M2M3) M4) 순으로 곱하면 우리가 원하는 최종적인 결과를 얻을 수 있다.</p>\n<h2>연쇄 행렬 곱셉 문제에서의 최적성의 원리.</h2>\n<p>n개의 행렬을 곱하는 최적의 순서는 n개의 행렬의 어떤 부분집합을 곱하는 최적의 순서를 포함한다.</p>\n<p>ex)\n7개 행렬을 곱하는 최적의 순서를 (M1M2)( (((M3M4) M5) M6) M7) 이라고 할 때 M3, M4, M5를 곱하는 최적의 순서는 ((M3M4) M5) 이다.\n이렇게 부분 문제들의 최적해로 n개 행렬을 곱하는 최적의 순서를 구할 수 있기 때문에 최적성의 원리가 성립하므로 동적 프로그래밍 방법으로 해결 가능하다.</p>\n<h2>연쇄 행렬 곱셈 문제의 점화식</h2>\n<p>n개의 행렬 $M<em>i$($D</em>{i-1}$ x $D_i$)(1 &#x3C;= i &#x3C; n)를 아래와 같이 연쇄적으로 곱하는 문제를 생각해보자.</p>\n<p>$M<em>1$ x $M</em>2$ x $M<em>3$ x ... x $M</em>{n-1}$ x $M<em>n$ = ($d</em>0$ x $d<em>1$) x ($d</em>1$ x $d<em>2$) x ($d</em>2$ x $d<em>3$) x ... x ($d</em>{n-2}$ x $d<em>{n-1}$) x ($d</em>{n-1}$ x $d_n$)</p>\n<p>최적해를 구축하기 위해서 테이블 C[][]를 다음과 같이 정의한다.</p>\n<ul>\n<li><strong>C(i, j)</strong> = $M<em>i$ x $M</em>{i+1}$ x ... x $M<em>{j-1}$ x $M</em>j$ 를 수행하는데 필요한 곱셈의 최소 횟수(비용).</li>\n</ul>\n<p>C(i, i) -> C(i, i + 1) -> C(i, i + 2) -> ... -> C(1, n) 순으로 계산하므로 따라서 구하려는 n개 행렬을 연쇄적으로 곱하는데 필요한 최소 곱셈의 횟수는 C(1, n)이 된다.</p>\n<ul>\n<li>C(i, i) = 0</li>\n<li>C(i, i + 1) = $d<em>{i-1}$$d</em>i$$d<em>{i+1}$ => $d</em>{i-1}$ x $d_{i+1}$</li>\n<li>C(i, i + 2) = min{$M<em>i$($M</em>{i+1}$$M<em>{i+2}$)) + 결합비용, ($M</em>i$$M<em>{i+1}$)$M</em>{i+2}$ + 결합비용} = min{C(i,i) + C(i + 1, i + 2) + $d<em>{i-1}$$d</em>i$$d<em>{i+2}$, C(i, i+1) + C(i+2, i+2) + $d</em>{i-1}$$d<em>{i+1}$$d</em>{i+2}$}</li>\n<li>C(i, i+3) = min{$M<em>i$($M</em>{i+1}$$M<em>{i+2}$$M</em>{i+3}$) + 결합비용, ($M<em>i$$M</em>{i+1}$)($M<em>{i+2}$$M</em>{i+3}$) + 결합비용, ($M<em>i$$M</em>{i+1}$$M<em>{i+2}$)$M</em>{i+3}$ + 결합비용} = min{C(i, i) + C(i+1, i+3) + $d<em>{i-1}$$d</em>i$$d<em>{i+3}$, C(i, i+1) + C(i+2, i+3) + $d</em>{i-1}$$d<em>{i+1}$$d</em>{i+3}$, C(i, i+2) + C(i+3, i+3) + $d<em>{i-1}$$d</em>{i+2}$$d_{i+3}$}</li>\n</ul>\n<p>즉 점화식은 다음과 같다.</p>\n<ul>\n<li><strong>C(i, j)</strong> = min{($M<em>i$ ... $M</em>k$)($M<em>{k+1}$ ... $M</em>j$) + 결합비용} = min{C(i, k) + C(k + 1,j) + $d<em>{i-1}$$d</em>k$$d_j$} (i &#x3C;= k &#x3C;= j-1)</li>\n<li>C(i, i) = 0</li>\n</ul>\n<h2>알고리즘</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MAX_VALUE 9999999</span>\n\n<span class=\"token keyword\">int</span> min <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> a <span class=\"token operator\">&lt;</span> b <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * length: 행렬의 갯수\n * d[]: 정수 배열\n*/</span>\n<span class=\"token keyword\">int</span> minMatMult <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// n개의 행렬을 곱하는데 필요한 곱셈 횟수의 최솟값을 저장하는 배열.</span>\n  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>matrix <span class=\"token operator\">=</span>  <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// mtarix[i][i] 초기화.</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> f <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> f <span class=\"token operator\">&lt;=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> f<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;=</span> length <span class=\"token operator\">-</span> f<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> f <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span>\n\n      matrix<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MAX_VALUE<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        matrix<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> matrix<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> d<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> d<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>작동 방법</h2>\n<p>3 x 2, 2 x 4, 4 x 1인 세개의 행렬 M1, M2, M3이 있다고 할 때 여기서 d0 = 3, d1 = 2, d2 = 4, d3 = 1 이므로 d[] = { 3, 2, 4, 1 }, length = 3 이 된다.</p>\n<ol>\n<li>초기화</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"center\"></td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>C(i, i) = 0 이므로 먼저 초기값을 세팅해준다.</p>\n<ol start=\"2\">\n<li>f = 1, n = 1, j = 2</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">24</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"center\"></td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>C(1, 2) = min{C(1, 1) + C(2, 2) + d0 x d1 x d2} = 0 + 0 + 3 x 2 x 4 이므로 24이다.</p>\n<ol start=\"3\">\n<li>f = 1, n = 2, j = 3</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">24</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"center\"></td>\n<td align=\"center\">0</td>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>c(2, 3) = min{C(2, 2) + C(3, 3) + d1 x d2 x d3} = 0 + 0 + 2 x 4 x 1 이므로 8이다.</p>\n<ol start=\"4\">\n<li>f = 2, n = 1, j = 3</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">24</td>\n<td align=\"center\">14</td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"center\"></td>\n<td align=\"center\">0</td>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>C(1, 3) = min{C(1, 1) + C(2, 3) + d0 x d1 x d3, C(1, 2) + C(3, 3) + d0 x d2 x d3} = min (0 + 8 + 3 x 2 x 1, 24 + 0 + 3 x 4 x 1) = min(14, 36) 이므로 14 이다.</p>\n<p>C(1, length)을 반환하므로 최소 곱셉횟수는 C(1, 3) = 14 가 된다.</p>\n<h2>성능</h2>\n<p>위의 알고리즘 소스를 보면 for문이 3중으로 중첩된 것을 볼 수 있다.</p>\n<p>O($\\sum_{s=1}^{n-1}$[(n - s) X s]) = O($n^3$) 이므로 알고리즘의 시간 복잡도는 O($n^3$)이다.</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"http://press.knou.ac.kr/goods/textBookView.do?condCmdtCode=9788920026935&#x26;condLscValue=001&#x26;condYr=&#x26;condSmst=\">방송대 컴퓨터과학과 알고리즘 5강</a></li>\n<li><a href=\"https://huiyu.tistory.com/entry/DP-%EC%97%B0%EC%87%84%ED%96%89%EB%A0%AC-%EC%B5%9C%EC%86%8C%EA%B3%B1%EC%85%88-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">[DP] 연쇄행렬 최소곱셈 알고리즘</a></li>\n<li><a href=\"https://twinparadox.tistory.com/183\">[Algorithm] 동적계획법 - 연속 행렬 곱셈 본문</a></li>\n</ul>","frontmatter":{"date":"2019년 05월 12일","description":"n개의 행렬을 연쇄적으로 곱할 때 최적의 곱셈 순서를 구하는 문제.","path":"/base/algorithms/min-mat-mult","title":"연쇄 행렬 곱셈 문제"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}