{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/base/operating-system/operating-system","webpackCompilationHash":"99047778a664d1d4dbd5","result":{"data":{"markdownRemark":{"html":"<h2>운영체제</h2>\n<p>컴퓨터의 하드웨어 자원을 관리하고 컴퓨터 프로그램이 동작하기 위한 서비스를 제공하는 시스템 소프트웨어.\nex) 윈도우, 맥 OS, 리눅스 등..</p>\n<h2>운영체제의 역할</h2>\n<h3>컴퓨터 시스템의 운영</h3>\n<ul>\n<li>\n<p>컴퓨터 시스템의 자원을 제어 및 관리 하여 컴퓨터 시스템을 효율적으로 운영하는 역할.</p>\n<ul>\n<li>자원이란 컴퓨터 시스템을 구성하고 있는 하드웨어 혹은 소프트웨어.</li>\n<li>하드웨어 자원: CPU, 메모리, 키보드, 마우스, 네트워크 카드 등...</li>\n<li>소프트웨어 자원: 각종 프로그램 데이터 등...</li>\n</ul>\n</li>\n</ul>\n<h3>사용자 지원</h3>\n<ul>\n<li>사용자의 명령을 해석하여 실행.</li>\n<li>사용자와 하드웨어 사이의 매개체 역할 수행.</li>\n</ul>\n<h2>컴퓨터 시스템과 운영체제</h2>\n<p>운영체제가 없던 초기 컴퓨터 시스템에서는...</p>\n<ul>\n<li>\n<p>사용자가 응용 프로그램을 수행시키면 응용 프로그램이 직접 컴퓨터 시스템의 자원을 제어해야만 했다.</p>\n<ul>\n<li>응용 프로그램에서 하드웨어를 다룰 수 있는 기능들을 모두 가지고 있었고 이때믄에 응용 프로그램 개발자는 하드웨어에 대한 방법을 잘 알아야 했다.</li>\n</ul>\n</li>\n<li>하나의 하드웨어를 여러 사용자가 공유해서 사용하는 경우 응용 프로그램들 끼리 효울적인 자원 분할이 어려웠다.</li>\n</ul>\n<p>이런 문제점을 극복하기 위해 하드웨어와 응용 프로그램 사이에 운영체제를 두고 하드웨어에 대한 제어는 운영체제만 하도록 했다.</p>\n<ul>\n<li>응용 프로그램은 하드웨어에 대한 자세한 정보를 모르더라도 운영체제에 부탁만 하면 운영체제가 대신 하드웨어를 제어하고 그 결과를 응용 프로그램에 제공해 주게 되었다.</li>\n<li>여러 응용 프로그램이 동시에 수행되더라도 운영체제가 중간에서 충돌 없이 자원을 효율적으로 나눠 줌으로써 컴퓨터 시스템이 안정적으로 동작할 수 있게 되었다.</li>\n</ul>\n<p>이러한 형태로 운영체제가 동작하려면 응용프로그램이 직접 하드웨어에 접근하는 것을 강제로 막을 필요가 있다. 응용 프로그램이 하드웨어를 직접 제어할 수 있는 방법이 여전히 존재한다면 시스템의 안정성을 보장할 수 없기 때문이다.</p>\n<h3>슈퍼바이저 모드(커널 모드)</h3>\n<ul>\n<li>운영체제의 커널이 동작되는 모드.</li>\n<li>하드웨어를 직접 제어할 수 있는 CPU 명령어 사용 가능.</li>\n</ul>\n<h3>보호 모드(사용자 모드)</h3>\n<ul>\n<li>응용 프로그램이 동작되는 모드.</li>\n<li>하드웨어를 직접 제어할 수 있는 CPU 명령어 사용 불가능</li>\n</ul>\n<p>보호 모드에서 동작하는 응용 프로그램이 하드웨어에 대한 제어가 필욯한 경우에는 운영체제에 부탁을 해야만 하고, 그 경우 보호 모드에서 슈퍼바이저 모드로 변경이 되고 운영체제의 커널이 동작하여 하드웨어를 제어하게 된다.\n이 때 응용 프로그램이 운영체제에 서비스를 요청하는 메커니즘을 <strong>시스템 호출</strong>이라고 한다.</p>\n<p>보호 모드 사용 시 하드웨어 접근이 필요한 경우...\n==> 보호 모드 사용 중 -> 시스템 호출 -> 보호 모드에서 슈퍼바이저 모드로 변경 -> 커널 동작 -> 하드웨어 제어 -> 응용 프로그램에게 결과를 돌려줌 -> 보호 모드로 돌아옴</p>\n<h2>커널</h2>\n<ul>\n<li>운영체제의 핵심 요소.</li>\n<li>응용 프로그램과 하드웨어 수준의 처리 사이의 가교 역할을 함.</li>\n</ul>\n<h3>일체형 커널</h3>\n<ul>\n<li>운영체제의 모든 서비스가 커널 내에 포함되어 있다.</li>\n<li>커널 내부 요소들이 서로 효율적으로 상호작용을 할 수 있다.</li>\n<li>모든 요소가 커널 내부에 존재하기 떄문에 하나의 요소에서라도 오류가 발생하면 시스템 전체에 장애를 일으킬 수 있다.</li>\n<li>UNIX, Linux.</li>\n</ul>\n<h3>마이크로 커널</h3>\n<ul>\n<li>운영체제의 대부분의 요소들을 커널 외부로 분리.</li>\n<li>커널 내부에는 메모리 관리, 멀티태스킹, 프로세스 간 통신(IPC) 등의 최소한의 요소들만 남겨놓음.</li>\n<li>새로운 서비스를 추가하여 운영체제를 확장하기 쉬움.</li>\n<li>커널 외부의 요소에 문제가 발생하더라도 커널 자체에는 영향이 없기 때문에 유지보수가 용이하여 안정성이 우수함.</li>\n<li>커널 외부 요소들 사이에 데이터 전달이 필요한 경우에는 프로세스 간 통신(IPC)을 통해야만 하기 떄문에 성능 저하가 발생한다.</li>\n</ul>\n<h2>Reference</h2>\n<p><a href=\"http://press.knou.ac.kr/goods/textBookView.do?condCmdtCode=9788920017322&#x26;condLscValue=001&#x26;condYr=&#x26;condSmst=\">방송대 컴퓨터과학과 운영체제 1강</a></p>","frontmatter":{"date":"March 16, 2019","path":"/base/operating-system/operating-system","title":"운영체제"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}