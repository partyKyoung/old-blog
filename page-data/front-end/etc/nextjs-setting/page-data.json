{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/front-end/etc/nextjs-setting","webpackCompilationHash":"5465027a193cfbd5477d","result":{"data":{"markdownRemark":{"html":"<p>TypeScript + create-react-app으로 생성된 프로젝트에 Next.js를 적용해보자.</p>\n<h2>모듈 설치</h2>\n<p>next와 next-typescript 설치한다. next-typeScript는 next에서 TypeScript를 쓸 수 있게 도와주는 플러그인이다.</p>\n<pre><code>yarn add next @types/next\nyarn add @zeit/next-typescript\n</code></pre>\n<h2>package.json</h2>\n<p>package.json에 next를 실행시키는 명령어를 적어준다.</p>\n<pre><code class=\"language-json\">{\n  // ...\n  \"scripts\": {\n    \"dev\": \"next\"\n    // ...\n  }\n  // ...\n}\n</code></pre>\n<h2>next.config.js</h2>\n<p>root 폴더에 next.config.js 파일을 생성한 후 next-typescript를 적용해준다. next에 플러그인을 적용하거나 webpack 커스터마이징을 할 때 이 파일에서 작업하면 된다.</p>\n<pre><code class=\"language-javascript\">const withTypescript = require(\"@zeit/next-typescript\")\n\nmodule.exports = withTypescript()\n</code></pre>\n<h2>.babelrc 또는 package.json</h2>\n<p>.babelrc 파일을 생성해 아래와 같은 내용을 추가해준다. create-react-app으로 생성한 프로젝트는 babelrc 설정이 package.json안에 들어가 있기 때문에 따로 babelrc 파일을 생성할 필요가 없다.</p>\n<pre><code class=\"language-json\">{\n  \"presets\": [\"next/babel\", \"@zeit/next-typescript/babel\"]\n}\n</code></pre>\n<h2>tsconfig.json</h2>\n<p>아래와 같이 typeScript 설정 파일을 생성해준다.</p>\n<pre><code class=\"language-json\">{\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"jsx\": \"preserve\",\n    \"lib\": [\"dom\", \"es2017\"],\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"noEmit\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"preserveConstEnums\": true,\n    \"removeComments\": false,\n    \"skipLibCheck\": true,\n    \"sourceMap\": true,\n    \"strict\": true,\n    \"target\": \"esnext\"\n  }\n}\n</code></pre>\n<h2>pages/index.js</h2>\n<p>첫 페이지를 만들어준다.</p>\n<pre><code class=\"language-javascript\">import React from \"react\"\n\nconst Index: React.StatelessComponent = () => {\n  return &#x3C;div>Index Page&#x3C;/div>\n}\n\nexport default Index\n</code></pre>\n<p>nextjs를 사용하려면 pages폴더가 무조건 있어야 한다. 이 pages안에 라우팅 url과 동일한 이름의 컴포넌트를 생성해야 한다. pages 컴포넌트가 next 라우팅과 동일하게 mapping 되기 때문에 이 규칙은 반드시 지켜야한다.</p>\n<h2>실행</h2>\n<p>아래의 명령어로 실행하면 방금 작성한 첫 페이지가 뜨는게 보일 것이다.</p>\n<pre><code>npm run dev\n</code></pre>\n<h2>Reference</h2>\n<p><a href=\"https://github.com/zeit/next-plugins/tree/master/packages/next-typescript\">zeit/next-plugins</a>\n<a href=\"https://blueshw.github.io/2018/04/15/why-nextjs/\">[nextjs] nextjs는 어떻게 동작하는가?</a></p>","frontmatter":{"date":"May 14, 2019","path":"/front-end/etc/nextjs-setting","title":"create-react-app + TypeScript + Next.js"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}