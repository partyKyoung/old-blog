{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/front-end/etc/nextjs-setting","webpackCompilationHash":"69f699c41ffb354934db","result":{"data":{"markdownRemark":{"id":"9854d9e2-d484-552f-8905-80f8fdd149e4","html":"<p>TypeScript + create-react-app으로 생성된 프로젝트에 Next.js를 적용해보자.</p>\n<h2>모듈 설치</h2>\n<p>next와 next-typescript 설치한다. next-typeScript는 next에서 TypeScript를 쓸 수 있게 도와주는 플러그인이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn add next @types/next\nyarn add @zeit/next-typescript</code></pre></div>\n<h2>package.json</h2>\n<p>package.json에 next를 실행시키는 명령어를 적어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next\"</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>tsconfig.json</h2>\n<p>8.1.0 버전까지는 next.js에서 typescript를 사용하려면 next-typescrip라는 플러그인을 추가로 사용해야했으나 9버전 부터는 tsconfig.json 파일만 생성해주면 TypeScript를 사용할 수 있게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"allowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// js파일(js, jsx)도 컴파일 대상에 포함시킨다.</span>\n    <span class=\"token property\">\"alwaysStrict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 엄격모드에서 구문을 분석한다.</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* import * as 모듈 from ... -> import 모듈 from ... 이런 식으로 import 할 수 있게 해준다. */</span>\n    <span class=\"token property\">\"isolatedModules\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* 각 파일을 별도의 모듈로 변환해준다. */</span>\n    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preserve\"</span> <span class=\"token comment\">/* Preserves jsx outside of Next.js. */</span>\n    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"es2017\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* List of library files to be included in the type checking. */</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 컴파일된 모듈의 결과물을 어떤 모듈 시스템으로 할지 결정한다.</span>\n    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span> <span class=\"token comment\">/* Determine how modules get resolved. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noEmit\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Do not emit outputs. Makes sure tsc only does type checking. */</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">/* Strict Type-Checking Options, optional, but recommended. */</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Report errors for fallthrough cases in switch statement. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Report errors on unused locals. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Report errors on unused parameters. */,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 모든 엄격한 타입 검사 옵션을 활성화한다.</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esnext\"</span> <span class=\"token comment\">// 컴파일 결과물을 js의 어떤 버전으로 할 것인지 지정한다.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>pages/index.js</h2>\n<p>첫 페이지를 만들어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">const</span> Index<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">StatelessComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Index Page<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Index</code></pre></div>\n<p>nextjs를 사용하려면 pages폴더가 무조건 있어야 한다. 이 pages안에 라우팅 url과 동일한 이름의 컴포넌트를 생성해야 한다. pages 컴포넌트가 next 라우팅과 동일하게 mapping 되기 때문에 이 규칙은 반드시 지켜야한다.</p>\n<h2>실행</h2>\n<p>아래의 명령어로 실행하면 방금 작성한 첫 페이지가 뜨는게 보일 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm run dev</code></pre></div>\n<h2>next 8.1에서 9버전대로 업그레이드 하면서 났던 오류들.</h2>\n<h3>error TS2349: Cannot invoke an expression whose type lacks a call signature.</h3>\n<p>tsconfig.json에서 esModuleInterop를 true로 줬기 때문에 나는 오류인것 같다. 아래처럼 import 문을 고쳐주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// import * as next from 'next'</span>\n\n <span class=\"token keyword\">import</span> next <span class=\"token keyword\">from</span> <span class=\"token string\">'next'</span></code></pre></div>\n<h3>Cannot re-export a type when the '--isolatedModules' flag is provided.</h3>\n<p>이것 역시 tsconfig.json에서 isolatedModules 옵션을 true로 해줬기 때문에 나는 것 같다. 아래 처럼 export 문을 고쳐주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// export { SomeType };</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SomeType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./types\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> type SomeType <span class=\"token operator\">=</span> SomeType<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Module '\"node_modules/next/router\"' has no exported member 'WithRouterProps'.</h3>\n<p>WithRouterProps를 import 할 때 나는 오류 인데 아래처럼 고쳐주면 된다. import 문을 고쳐주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// import { WithRouterProps } from 'next/router'; </span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> WithRouterProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next/dist/client/with-router'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Argument of type 'ConnectedComponentClass&#x3C;FunctionComponent<PageTemplateProps>, Pick&#x3C;PageTemplateProps, \"children\" | \"gaId\">>'</h3>\n<p>이건 정확히 원인을 모르겠는데 withRouter랑 connect 함수를 compose로 묶어주면 해결된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// withRouter(connnect()()) => .. 생략</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  withRouter<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://github.com/zeit/next-plugins/tree/master/packages/next-typescript\">zeit/next-plugins</a></li>\n<li><a href=\"https://blueshw.github.io/2018/04/15/why-nextjs/\">[nextjs] nextjs는 어떻게 동작하는가?</a></li>\n</ul>","frontmatter":{"date":"2019년 05월 14일","description":"Next.js와 TypeScript를 사용하여 React 프로젝트 설정하기.","path":"/front-end/etc/nextjs-setting","title":"create-react-app + TypeScript + Next.js"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}