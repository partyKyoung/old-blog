{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/front-end/issue/ex-if","webpackCompilationHash":"f2d86240cf0952cf51aa","result":{"data":{"markdownRemark":{"html":"<p>회사에서 열심히 일을 하던 도중 이슈가 하나 생겼다. 폰으로 사진 파일을 업로드 하면 어떤 사진들은 이미지 방향이 자꾸 돌아가서 업로드 되는 것이었다.</p>\n<p><img src=\"/images/frontend/javascript-memo-exif-1.png\" alt=\"이렇게 이미지 뷰어나 앨범에서 보면 제대로 출력되는 사진들이\">\n<img src=\"/images/frontend/javascript-memo-exif-2.png\" alt=\"이런식으로 이미지가 돌아가서 나온다\"></p>\n<p>사실 좀 귀찮기도 하고 어떻게 고칠지 막막하기도 해서 그냥 냅두고 싶었지만 그러면 절대 안되기 때문에 우여곡절 어떻게든 방법을 찾아서 해결 했는데 그 과정을 공유해보고자 한다.</p>\n<h2>원인</h2>\n<p>카메라로 사진을 찍으면 메타데이터로 exif 값이 저장된다. 이 exif 는 디지털 카메라에서 이용되는 이미지 파일 포맷인데 여기에 orientation 이라고 사진의 방향 값이 저장되어 있다.</p>\n<p><img src=\"/images/frontend/javascript-memo-exif-4.gif\" alt=\"exif orientation\"></p>\n<p><a href=\"https://github.com/exif-js/exif-js\">exif-js</a> 오픈소스를 사용하면 exif 데이터를 읽어올 수 있길래 한번 써보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getExif</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> imageViewer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"imageViewer\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n  reader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">EXIF</span><span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> tags <span class=\"token operator\">=</span> <span class=\"token constant\">EXIF</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAllTags</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// metadata 출력</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tags<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 이미지 미리보기</span>\n      imageViewer<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundImage <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`url(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  reader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsDataURL</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"/images/frontend/javascript-memo-exif-3.png\" alt=\"확인해보면 orientation값이 6으로 되어있다.\"></p>\n<h2>해결 방법</h2>\n<p>대표님이 세가지 솔루션을 제시해주셨다.</p>\n<ol>\n<li>client 단에서 업로드시 orientation 값 기준으로 수정하여 서버에 업로드</li>\n<li>server 단에서 업로드 후 rotation 처리</li>\n<li>보여줄때 그때마다 rotation 처리해 주는 방식</li>\n</ol>\n<p>여기서 <a href=\"https://github.com/blueimp/JavaScript-Load-Image\">JavaScript-Load-Image</a> 오픈소스를 사용하면 첫번째 방법으로 해결이 될것 같아서 첫번째 방법으로 문제를 해결하기로 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fixRotationOfFile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>\n    image<span class=\"token punctuation\">,</span>\n    <span class=\"token parameter\">img</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> imageViewer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"imageViewer\"</span><span class=\"token punctuation\">)</span>\n\n      imageViewer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> maxWidth<span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> orientation<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"/images/frontend/javascript-memo-exif-4.png\" alt=\"정방향으로 출력되는 이미지\">\n이렇게 하면 이미지가 정뱡향으로 출력된다!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> fileType <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>type\n\n  <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>\n    file<span class=\"token punctuation\">,</span>\n    <span class=\"token parameter\">img</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">//</span>\n      img<span class=\"token punctuation\">.</span><span class=\"token function\">toBlob</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">blob</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> createdFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>blob<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 이미지 업로드 실행은 여기서</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> fileType<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> orientation<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 코드와 같은 식으로 정방향으로 출력된 blob 이미지를 file 로 바꾸어 이미지를 업로드 하는 식으로 해결했다.</p>\n<h2>마무리</h2>\n<p>AWS S3 및 몇몇 서비스에서는 원본을 그대로 두고 이미지가 출력될 때마다 rotation 처리를 해주는 방식을 사용한 것 같던데 나중에 기회가 된다면 이미지가 출력될 때마다 rotation 처리를 해주는 방식 으로도 한번 해결해보고 싶다.</p>","frontmatter":{"date":"July 11, 2018","path":"/front-end/issue/ex-if","title":"javascript로 사진 똑바로 만들기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}