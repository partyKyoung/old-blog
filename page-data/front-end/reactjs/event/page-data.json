{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/front-end/reactjs/event","webpackCompilationHash":"99047778a664d1d4dbd5","result":{"data":{"markdownRemark":{"html":"<h2>이벤트</h2>\n<p>유저가 웹 브라우저에서 DOM 요소들과 상호 작용하는 것을 이벤트(event)라고 한다.</p>\n<h3>javascript</h3>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;meta charset=\"utf-8\" />\n    &#x3C;title>이벤트&#x3C;/title>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;div id=\"number\">1&#x3C;/div>\n    &#x3C;button type=\"button\" onclick=\"changeNumber()\">클릭&#x3C;/button>\n\n    &#x3C;script>\n      function changeNumber() {\n        const div = document.getElementById(\"number\")\n\n        let number = parseInt(div.innerText)\n\n        number += 1\n\n        div.innerHTML = number\n      }\n    &#x3C;/script>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"javascript event\" src=\"//codepen.io/partykyoung/embed/bzwKgJ/?height=265&theme-id=0&default-tab=html,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/partykyoung/pen/bzwKgJ/'>javascript event</a> by partyKyoung\n  (<a href='https://codepen.io/partykyoung'>@partykyoung</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h3>react</h3>\n<p>React의 이벤트 시스템은 웹 브라우저의 HTML 이벤트와 인터페이스가 동일하기 때문에 사용법이 꽤 비슷하다.</p>\n<pre><code class=\"language-javascript\">import React, { Component } from \"react\"\n\nexport default class MyComponent extends Component {\n  constructor(props) {\n    super(props)\n\n    // state 초기값 설정\n    this.state = {\n      number: 0,\n    }\n  }\n\n  handleUpdate = () => {\n    const { number } = this.state\n\n    // state 업데이트\n    this.setState({\n      number: number + 1,\n    })\n  }\n\n  render() {\n    const { number } = this.state\n\n    return (\n      &#x3C;div>\n        {`Number: ${number}`}\n        &#x3C;button type=\"button\" onClick={this.handleUpdate}>\n          업데이트\n        &#x3C;/button>\n      &#x3C;/div>\n    )\n  }\n}\n</code></pre>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"react state\" src=\"//codepen.io/partykyoung/embed/PVNOjm/?height=265&theme-id=0&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/partykyoung/pen/PVNOjm/'>react state</a> by partyKyoung\n  (<a href='https://codepen.io/partykyoung'>@partykyoung</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h3>이벤트 사용시 주의 사항</h3>\n<ul>\n<li>이벤틑 이름은 camelCase로 작성하기\nonclick이나 onchagne등의 이벤트 이름을 React에서는 onClick, onChagne ... 이런 식으로 작성해야 한다.</li>\n<li>이벤트에 함수 형태의 객체를 전달하기\nHTML에서는 이벤트를 설정할 때 큰 따옴표 안에 실행할 코드를 넣지만 리액트에서는 함수 형태의 객체를 전달한다. 화살표 함수로 바로 전달해도 되고 렌더링 부분 외부에 함수를 작성해서 전달해도 된다.</li>\n<li>DOM 요소에만 이벤트 설정 가능\nDOM 요소에는 이벤트를 설정할 수 있지만 직접 만든 컴포넌트에는 이벤트를 설정시 props로 전달되기 때문에 자체적으로 이벤트를 사용할 순 없다. 대신 전달받은 props를 컴포넌트 내부의 DOM에서 이벤트로 설정 가능하다.</li>\n</ul>\n<h3>이벤트 바인딩</h3>\n<p><img src=\"/images/frontend/reactjs-event-1.png\" alt=\"함수가 가리키는 this\">\nJavaScript 에서 함수를 선언하면 함수는 자기 자신을 가리키는 this 를 생성하며, 함수 호출 시, this 는 전역 객체를 바인딩 하게 된다.</p>\n<pre><code class=\"language-javascript\">export default class MyComponent extends Component {\n  state = {\n    number: 0,\n  }\n\n  handleUpdate() {\n    const { number } = this.state\n\n    // state 업데이트\n    this.setState({\n      number: number + 1,\n    })\n  }\n\n  // ... 생략\n}\n</code></pre>\n<p><img src=\"/images/frontend/reactjs-event-2.png\" alt=\"함수 바인딩이 되어있지 않기 때문에 함수 실행 시 오류가 발생한다.\">\n리액트도 JavaScript이기 때문에 위의 코드 처럼 컴포넌트에 임의 메서드를 만들면 기본적으로 this에 접근할 수 없다.</p>\n<pre><code class=\"language-javascript\">export default class MyComponent extends Component {\n  // ... 생략\n\n  constructor() {\n    super()\n\n    this.handleUpdate = this.handleUpdate.bind(this)\n  }\n\n  handleUpdate() {\n    const { number } = this.state\n\n    // state 업데이트\n    this.setState({\n      number: number + 1,\n    })\n  }\n\n  // ... 생략\n}\n</code></pre>\n<p>컴포넌트의 생성자 메서드인 constructor에서 각 메서드를 this와 바인딩 해주어야 한다. 메서드에서 this를 사용할 수 있도록 메서드에 this를 묶어주는 것이다.</p>\n<pre><code class=\"language-javascript\">export default class MyComponent extends Component {\n  state = {\n    number: 0,\n  }\n\n  handleUpdate = () => {\n    const { number } = this.state\n\n    // state 업데이트\n    this.setState({\n      number: number + 1,\n    })\n  }\n\n  // ... 생략\n}\n</code></pre>\n<p>바벨의 transform-class-properties 문법을 사용하여 화살표 함수 형태로 메서드를 정의할 수 있다.\n화살표 함수는 함수를 둘러싸고 있는 영역의 this를 함수 내부에서 this로 그대로 사용한다.</p>\n<h3>typescript</h3>\n<pre><code class=\"language-javascript\">import React, { Component } from \"react\"\n\ninterface Props {}\ninterface State {\n  number: number;\n}\n\nexport default class MyComponent extends Component&#x3C;Props, State> {\n  state = {\n    number: 0,\n  }\n\n  handleUpdate: any = () => {\n    const { number } = this.state\n\n    // state 업데이트\n    this.setState({\n      number: number + 1,\n    })\n  }\n\n  render(): JSX.Element {\n    const { number } = this.state\n\n    return (\n      &#x3C;div>\n        {`Number: ${number}`}\n        &#x3C;button type=\"button\" onClick={this.handleUpdate}>\n          업데이트\n        &#x3C;/button>\n      &#x3C;/div>\n    )\n  }\n}\n</code></pre>\n<h2>Reference</h2>\n<p><a href=\"http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&#x26;mallGb=KOR&#x26;barcode=9791160505238&#x26;orderClick=LAG&#x26;Kc=\">리액트를 다루는 기술</a>\n<a href=\"https://2dubbing.tistory.com/66\">react 컴포넌트에서 constructor 내부에 이벤트 함수를 바인딩 해줘야 하는 이유</a>\n<a href=\"https://www.zerocho.com/category/React/post/578232e7a479306028f43393\">컴포넌트 이벤트 연결(바인딩)</a></p>","frontmatter":{"date":"February 09, 2019","path":"/front-end/reactjs/event","title":"이벤트 핸들링"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}