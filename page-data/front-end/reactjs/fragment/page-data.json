{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/front-end/reactjs/fragment","webpackCompilationHash":"36f39e3b50b61b19d339","result":{"data":{"markdownRemark":{"html":"<h2>JSX</h2>\n<pre><code class=\"language-jsx\">import React, { Component } from \"react\"\n\nclass App extends Component {\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;h1>React.js&#x3C;/h1>\n        &#x3C;div>\n          JSX &#x3C;br /> :)\n        &#x3C;/div>\n      &#x3C;/div>\n    )\n  }\n}\n\nexport default App\n</code></pre>\n<p>JSX는 JavaScript XML의 약자이다. render 함수를 보면 HTML 태그 처럼 생긴 것들이 보이는데 저 부분이 JSX 이다. JSX로 컴포넌트가 화면에 어떻게 보일지 나타낼 수 있다. JSX는 HTML과 비슷해 보이지만 용도도 사용법도 다르다.</p>\n<pre><code class=\"language-jsx\">import React, { Component } from \"react\"\n\nclass App extends Component {\n  render() {\n    return (\n      /* {\n        error\n\n        &#x3C;div>안녕하세요&#x3C;/div>\n        &#x3C;div>반갑습니다&#x3C;/div>\n\n      } */\n\n      &#x3C;div>\n        &#x3C;div>안녕하세요&#x3C;/div>\n        &#x3C;div>반갑습니다&#x3C;/div>\n      &#x3C;/div>\n    )\n  }\n}\n\nexport default App\n</code></pre>\n<p><img src=\"/images/frontend/reactjs-fragment-1.png\" alt=\"실행결과\">\nJSX는 컴포넌트에 여러 요소가 있다면 부모 요소 하나로 꼭 감싸야 한다. Virtual DOM에서 컴포넌트 변화를 감지해 낼 때 효율적으로 비교할 수 있도록 컴포넌트 내부는 DOM 트리 구조 하나여야 한다는 규칙이 있기 때문이다.\n하지만 이렇게 요소들을 감싸기 위한 용도로 DOM 요소들을 추가하다보면 쓸모없는 요소들이 늘어나게 된다.</p>\n<h2>Fragment</h2>\n<pre><code class=\"language-jsx\">import React, { Component, Fragment } from \"react\"\n\nclass App extends Component {\n  render() {\n    return (\n      &#x3C;Fragment>\n        &#x3C;div>안녕하세요&#x3C;/div>\n        &#x3C;div>반갑습니다&#x3C;/div>\n      &#x3C;/Fragment>\n    )\n  }\n}\n\nexport default App\n</code></pre>\n<p><img src=\"/images/frontend/reactjs-fragment-2.png\" alt=\"실행결과\"></p>\n<p>Fragment는 React v16 이상의 버전에서 도입되었다. Fragment로 부모 DOM 요소를 추가하지 않고도 자식 요소들을 그룹화 할 수 있다.\nFragment를 사용하면 단지 부모 요소로만 쓰이는 불필요한 DOM을 줄일 수 있어 조금 더 빨라지고 메모리 사용량도 조금 더 적어진다. 개발자 도구로 DOM 요소를 확인 할 때도 조금 더 편리하게 확인할 수 있다.</p>\n<pre><code class=\"language-jsx\">import React, { Component } from \"react\"\n\nclass App extends Component {\n  render() {\n    return (\n      &#x3C;>\n        &#x3C;div>안녕하세요&#x3C;/div>\n        &#x3C;div>반갑습니다&#x3C;/div>\n      &#x3C;/>\n    )\n  }\n}\n\nexport default App\n</code></pre>\n<p>fragments를 일일히 import 하지않고 &#x3C;>&#x3C;/>만으로도 fragments를 사용할 수 있다.</p>\n<h2>마무리</h2>\n<p>실무에서 React.js를 사용하면서 왜 JSX에 부모요소로 꼭 자식요소들을 감싸야 하는지 이유도 모른체 매번 써왔는데 이번에 처음부터 React.js를 공부하면서 드디어 그 이유를 알게 되었다 ㅠ...\n개인적으로 부모요소 규칙때문에 짜증난적이 한두번이 아니었는데 Fragment 덕분에 많이 편해졌다. 필요한걸 쏙쏙 골라서 업데이트 해주는 React.js가 너무 좋다 :).</p>\n<h2>Reference</h2>\n<p><a href=\"http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&#x26;mallGb=KOR&#x26;barcode=9791160505238&#x26;orderClick=LAG&#x26;Kc=\">리액트를 다루는 기술</a>\n<a href=\"https://reactjs.org/docs/fragments.html\">Fragments</a></p>","frontmatter":{"date":"August 05, 2018","path":"/front-end/reactjs/fragment","title":"Fragment"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}