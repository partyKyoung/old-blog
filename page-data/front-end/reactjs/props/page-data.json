{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/front-end/reactjs/props","webpackCompilationHash":"306c1024de87b0321d7d","result":{"data":{"markdownRemark":{"html":"<h2>props</h2>\n<p>props는 Component 속성을 설정할 때 사용하는 요소이다. Component는 props를 받고 props의 값에 따라 다르게 렌더링 하거나 작동할 수 있다.\nPropTypes 속성의 종류는 <a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html\">React 공식 문서</a>에서 확인할 수 있다.</p>\n<h4>부모 컴포넌트</h4>\n<pre><code class=\"language-javascript\">import React, { Component } from \"react\"\n\nimport Child from \"./Child\"\n\nclass Parent extends Component {\n  render() {\n    return &#x3C;Child singer=\"Nell\" song=\"Home\" />\n  }\n}\n\nexport default Parent\n</code></pre>\n<p>props값은 해당 컴포넌트를 불러와 사용하는 부모 컴포넌트에서만 설정할 수 있다.</p>\n<h4>자식 컴포넌트</h4>\n<pre><code class=\"language-javascript\">// 자식 컴포넌트\nimport React, { Component } from \"react\"\n\nclass Child extends Component {\n  render() {\n    const { singer, song } = this.props\n\n    return (\n      &#x3C;div>\n        지금 듣고 있는 노래는 {singer}의 {song}입니다.\n      &#x3C;/div>\n    )\n  }\n}\n\nexport default Child\n</code></pre>\n<p>props에 접근할 때는 this 키워드를 사용하여 접근한다.</p>\n<p><img src=\"/images/frontend/reactjs-props-1.png\" alt=\"실행결과\"></p>\n<p>부모 Component에서 자식 Component로 전달되며 받아온 props는 수정할 수 없다.</p>\n<p><img src=\"/images/frontend/reactjs-props-2.png\" alt=\"Object.isFrozen 메소드로 동결되어 있는것을 확인할 수 있다. props값을 바꾸려고 하면 에러가 난다.\"></p>\n<h3>propTypes</h3>\n<pre><code class=\"language-javascript\">import React, { Component } from \"react\"\nimport PropTypes from \"prop-types\"\n\nclass Child extends Component {\n  // ... 생략\n}\n\nChild.propTypes = {\n  singer: PropTypes.string,\n  song: PropTypes.string.isRequired, // 필수적으로 존재해야 한다.\n}\n\nexport default Child\n</code></pre>\n<p>컴포넌트의 필수 props를 지정하거나 props 타입을 지정할 때는 propTypes를 사용한다. propTypes를 지정하려면 <strong>prop-types</strong> 모듈이 필요하다.\n필수 props를 지정하고 싶을 땐 propTypes를 설정할 때 isRequired를 사용하면 된다.</p>\n<pre><code class=\"language-javascript\">export default class Parent extends Component {\n  render() {\n    return &#x3C;Child singer={123} song=\"Home\" />\n  }\n}\n</code></pre>\n<p><img src=\"/images/frontend/reactjs-props-3.png\" alt=\"잘못된 타입으로 props를 넘겨줘 보았다.\">\nprops의 타입을 propTypes에서 설정한 타입과 다른 타입으로 넘겨주면 렌더링은 되나 개발자 도구에 오류 메시지가 출력된다.</p>\n<pre><code class=\"language-javascript\">export default class Parent extends Component {\n  render() {\n    return &#x3C;Child singer=\"Nell\" />\n  }\n}\n</code></pre>\n<p><img src=\"/images/frontend/reactjs-props-4.png\" alt=\"필수 props를 제외해 보았다.\">\n필수 props가 빠졌을 때도 렌더링은 되나 개발자 도구에 오류 메시지가 출력된다.</p>\n<h3>defaultProps</h3>\n<pre><code class=\"language-javascript\">import React, { Component } from \"react\"\nimport PropTypes from \"prop-types\"\n\nclass Child extends Component {\n  // ... 생략\n}\n\nChild.propTypes = {\n  singer: PropTypes.string,\n  song: PropTypes.string.isRequired,\n}\n\nChild.defaultProps = {\n  singer: \"Hoobastank\",\n  song: \"Without A Fight\",\n}\n\nexport default Child\n</code></pre>\n<p>defaultProps를 사용해서 prop의 기본 값을 설정할 수 있다. defaultProps는 prop-types 모듈이 필요 없다.</p>\n<pre><code class=\"language-javascript\">export default class Parent extends Component {\n  render() {\n    return &#x3C;Child />\n  }\n}\n</code></pre>\n<p><img src=\"/images/frontend/reactjs-props-5.png\" alt=\"defaultProps 적용\">\nprops를 지정해주지 않으면 defaultProps에 있는 기본 값이 적용된다.</p>\n<h3>transform-class-properties</h3>\n<pre><code class=\"language-javascript\">import React, { Component } from \"react\"\nimport PropTypes from \"prop-types\"\n\nclass Child extends Component {\n  static propTypes = {\n    singer: PropTypes.string,\n    song: PropTypes.string.isRequired,\n  }\n\n  static defaultProps = {\n    singer: \"Hoobastank\",\n    song: \"Without A Fight\",\n  }\n\n  render() {\n    const { singer, song } = this.props\n\n    return (\n      &#x3C;div>\n        지금 듣고 있는 노래는 {singer}의 {song}입니다.\n      &#x3C;/div>\n    )\n  }\n}\n\nexport default Child\n</code></pre>\n<p>propTypes, defaulProps를 클래스 내부에서 정의할 수도 있다. 이 문법을 사용하려면 transform-class-properties babel 플러그인이 필요한데 create-react-app으로 생성한 프로젝트는 기본적으로 적용되어 있기 때문에 따로 설정할 필요가 없다.</p>\n<h3>typescript</h3>\n<p>typeScript를 사용하여 props에 타입을 줘보자.</p>\n<pre><code class=\"language-javascript\">import * as React from \"react\"\n\ninterface ChildProps {\n  singer: string;\n  song: string;\n}\n\ninterface ChildState {}\n\nclass Child extends React.Component&#x3C;ChildProps, ChildState> {\n  static defaultProps = {\n    singer: \"Hoobastank\",\n    song: \"Without A Fight\",\n  }\n\n  render() {\n    const { singer, song } = this.props\n\n    return (\n      &#x3C;div>\n        지금 듣고 있는 노래는 {singer}의 {song}입니다.\n      &#x3C;/div>\n    )\n  }\n}\n\nexport default Child\n</code></pre>\n<p><img src=\"/images/frontend/reactjs-props-6.png\" alt=\"잘못된 타입을 지정했더니 렌더링 조차 되지 않고 오류를 출력한다.\"></p>\n<h2>Reference</h2>\n<p><a href=\"http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&#x26;mallGb=KOR&#x26;barcode=9791160505238&#x26;orderClick=LAG&#x26;Kc=\">리액트를 다루는 기술</a></p>","frontmatter":{"date":null,"path":"/front-end/reactjs/props","title":"props"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}