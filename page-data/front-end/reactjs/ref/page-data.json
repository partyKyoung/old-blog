{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/front-end/reactjs/ref","webpackCompilationHash":"36f39e3b50b61b19d339","result":{"data":{"markdownRemark":{"html":"<p>일반 HTML에서 DOM 요소에 이름을 달고 접근할 때 id를 사용한다.</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n  &#x3C;head>\n    &#x3C;meta charset=\"utf-8\" />\n    &#x3C;title>DOM ID&#x3C;/title>\n    &#x3C;link rel=\"stylesheet\" type=\"text/css\" href=\"./angry-heavy-rain.css\" />\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;div id=\"me\">DOM ID&#x3C;/div>\n    &#x3C;button type=\"button\" onclick=\"clickDOM()\">클릭&#x3C;/button>\n  &#x3C;/body>\n  &#x3C;script>\n    function clickDOM() {\n      const me = document.getElementById(\"me\")\n\n      me.style.backgroundColor = \"red\"\n    }\n  &#x3C;/script>\n&#x3C;/html>\n</code></pre>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"DOM Id\" src=\"//codepen.io/partykyoung/embed/YBRmYx/?height=265&theme-id=0&default-tab=html,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/partykyoung/pen/YBRmYx/'>DOM Id</a> by partyKyoung\n  (<a href='https://codepen.io/partykyoung'>@partykyoung</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h2>ref</h2>\n<p>HTML에서 id를 사용하여 DOM에 이름을 다는 것 처럼 리액트에서는 ref를 사용하여 DOM에 이름을 달 수 있다.</p>\n<p>리액트에서도 id를 사용할 수 있지만 특수한 경우가 아니면 사용을 권장하지 않는다. DOM의 id는 유일해야 하는데 컴포넌트를 여러번 사용하면 중복 id를 가진 DOM이 여러개 생기게 되는 경우가 있기 때문이다. 이런 상황에서는 컴포넌트를 만들 때 마다 중복 id가 발생하는 것을 방지해야 한다.</p>\n<p>ref는 전역적으로 작동하지 않고 컴포넌트 내부에서만 작동하기 때문에 이런 문제가 생기지 않는다.</p>\n<h3>ref를 사용해야 할 때</h3>\n<p>ref는 state나 props로 해결할 수 없고 DOM을 꼭 직접적으로 건드려야 할 때 사용한다.</p>\n<ul>\n<li>특정 input에 포커스 주기</li>\n<li>스크롤 박스 조작하기</li>\n<li>Canvas 요소에 그림 그리기 등</li>\n</ul>\n<h3>ref 사용법</h3>\n<p>ref를 달아야 하는 DOM에 props를 설정하듯이 ref를 설정햐면 된다. ref 값으로는 콜백 함수를 전달한다. 콜백 함수는 ref를 파라미터로 가지며 콜백 함수 내부에서 컴포넌트의 맴버 변수에 ref를 담는 코드를 작성한다.\nref 이름은 자유롭게 지정할 수 있다.</p>\n<pre><code class=\"language-javascript\">import React, { Component } from \"react\"\n\nexport default class Ref extends Component {\n  constructor() {\n    super()\n\n    this.input = null\n  }\n\n  handleFocus = () => {\n    this.input.focus()\n  }\n\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;input\n          type=\"text\"\n          ref={input => {\n            // this.input은 input 요소의 DOM을 가리킨다.\n            this.input = input\n          }}\n        />\n        &#x3C;button type=\"button\" onClick={this.handleFocus}>\n          클릭\n        &#x3C;/button>\n      &#x3C;/div>\n    )\n  }\n}\n</code></pre>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"react ref\" src=\"//codepen.io/partykyoung/embed/OdaKZw/?height=265&theme-id=0&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/partykyoung/pen/OdaKZw/'>react ref</a> by partyKyoung\n  (<a href='https://codepen.io/partykyoung'>@partykyoung</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h3>컴포넌트에 Ref 달기</h3>\n<p>리액트에서는 컴포넌트에도 ref를 달 수 있다. 이 방법은 주로 컴포넌트 내부에 있는 DOM을 컴포넌트 외부에서 사용할 때 쓴다. 컴포넌트에 ref를 다는 방법은 DOM에 ref를 다는 방법과 똑같다.</p>\n<h4>ChildRef.js</h4>\n<pre><code class=\"language-javascript\">import React, { Component } from \"react\"\n\nexport default class ChildRef extends Component {\n  constructor() {\n    super()\n\n    this.box = null\n  }\n\n  handleScroll = () => {\n    const { scrollHeight, clientHeight } = this.box\n\n    this.box.scrollTop = scrollHeight - clientHeight\n  }\n\n  render() {\n    const style = {\n      border: \"1px solid #000000\",\n      height: \"300px\",\n      width: \"300px\",\n      overflow: \"scroll\",\n    }\n\n    const innerStyle = {\n      height: \"600px\",\n      width: \"100%\",\n      background: \"linear-gradient(white, black)\",\n    }\n\n    return (\n      &#x3C;div\n        style={style}\n        ref={ref => {\n          this.box = ref\n        }}\n      >\n        &#x3C;div style={innerStyle} />\n      &#x3C;/div>\n    )\n  }\n}\n</code></pre>\n<h4>ParentRef.js</h4>\n<pre><code class=\"language-javascript\">import React, { Component } from \"react\"\n\nimport ChildRef from \"./ChildRef\"\n\nexport default class ParentRef extends Component {\n  constructor() {\n    super()\n\n    this.scroll = null\n  }\n\n  handleClick = () => {\n    /* \n      컴포넌트가 처음 랜더링 될 때는 this.scroll 값이 undefined 이므로 메서드를 호출 할 때 오류가 발생한다. \n\n      화살표 함수 문법을 사용하여 아예 새로운 함수를 만들고 그 내부에서 메서드를 실행하면 이미 한번 랜더링한 시점이므로 메서드 값을 읽어와서 실행하기 때문에 오류가 발생하지 않는다. \n    */\n\n    this.scroll.handleScroll()\n  }\n\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;ChildRef\n          ref={ref => {\n            this.scroll = ref\n          }}\n        />\n        &#x3C;button type=\"button\" onClick={this.handleClick}>\n          맨 밑으로\n        &#x3C;/button>\n      &#x3C;/div>\n    )\n  }\n}\n</code></pre>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"react component ref\" src=\"//codepen.io/partykyoung/embed/yZGBjV/?height=265&theme-id=0&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/partykyoung/pen/yZGBjV/'>react component ref</a> by partyKyoung\n  (<a href='https://codepen.io/partykyoung'>@partykyoung</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h3>마무리</h3>\n<p>컴포넌트 내부에서 DOM에 직접 접근해야 할 때는 ref를 사용한다. 먼저 ref를 사용하지 않고도 원하는 기능을 구현할 수 있는지 꼭 고려한 후 사용해야 한다.</p>\n<p>서로 다른 컴포넌트끼리 데이터를 교류할 때 ref를 사용하는 것을 잘못된 방법이다. 할 수는 있지만 리액트 사상에 어긋난 설계이다. 앱 규모가 커지면 구조가 꼬여버려 유지보수가 불가능하기 때문이다. 컴포넌트끼리 데이터를 교류할 때는 언제나 부모 &#x3C;-> 자식 흐름으로 교류해야 한다.</p>\n<h2>Reference</h2>\n<p><a href=\"http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&#x26;mallGb=KOR&#x26;barcode=9791160505238&#x26;orderClick=LAG&#x26;Kc=\">리액트를 다루는 기술</a>\n<a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">Refs and the DOM</a></p>","frontmatter":{"date":"February 17, 2019","path":"/front-end/reactjs/ref","title":"ref"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}