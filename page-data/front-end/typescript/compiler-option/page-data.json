{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/front-end/typescript/compiler-option","webpackCompilationHash":"69f699c41ffb354934db","result":{"data":{"markdownRemark":{"id":"eeca2a5f-33bb-51bb-a286-81d5ba02e798","html":"<h2>tsconfig.json</h2>\n<p><strong>tsconfig.json</strong> 파일은 프로젝트를 컴파일 하는데 필요한 루트 파일과 컴파일러 옵션을 지정한다.</p>\n<p><a href=\"http://json.schemastore.org/tsconfig\">JSON schema for the TypeScript compiler's configuration file</a>에서 스펙을 확인할 수 있다.</p>\n<p>ex)</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"preserveConstEnums\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../../built/local/tsc.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.spec.ts\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>compileOnSave</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"compileOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ts 파일을 저장 시 자동 컴파일을 해준다.</li>\n<li>true / false (default: false)</li>\n</ul>\n<h3>extends</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./configs/base\"</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>extends 속성을 사용해 다른 파일의 설정을 상속할 수 있다.</p>\n<ul>\n<li>클라이언트 작업물과 서버 사이드 작업물의 설정이 비슷하다면 한 파일을 만들어놓고 상속받은 후 필요한 부분만 바꿔 쓸 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3>files, include, exclude</h3>\n<p>셋다 설정이 없으면 모든 ts 파일들을 컴파일 해준다.</p>\n<h4>files</h4>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"core.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"sys.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"types.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"emitter.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsc.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"diagnosticInformationMap.generated.ts\"</span>\n  <span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>상대 혹은 절대 경로의 리스트 배열이다.</li>\n<li>files에 지정되어 있는 파일은 exclude에 관계 없이 항상 컴파일 대상에 포함된다. -> exclude보다 순위가 더 높다.</li>\n</ul>\n<h4>include</h4>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>glob 패턴 (.gitignore 이랑 비슷함.).</li>\n<li>include에 포함된 패턴과 맞는 파일들을 컴파일 대상에 포함시킨다.</li>\n<li>exclude 속성으로 필터링 할 수 있다.</li>\n<li>\n<p>js파일을 컴파일 대상에 포함시키는 allowJs 옵션이 있다.</p>\n<ul>\n<li>true/false</li>\n</ul>\n</li>\n</ul>\n<h4>exclude</h4>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.spec.ts\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>glob 패턴 (.gitignore 이랑 비슷함.)</li>\n<li>exclude에 포함된 패턴과 맞는 파일들은 컴파일 대상에서 제외된다.</li>\n<li>node<em>modules, bower</em>components, jspm_packages, <outDir>은 default로 제외한다.</li>\n</ul>\n<h3>compileOptions</h3>\n<h4>types</h4>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>타입을 가져올 패키지 목록.</li>\n<li>기본적으로는 @types 모든 패키지가 컴파일에 포함된다. types를 지정할 경우 나열된 패키지만 컴파일 대상에 포함된다.</li>\n</ul>\n<h3>target</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es3\"</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>컴파일 결과물을 js의 어떤 버전으로 할 것인지 지정한다. (default: es3)</li>\n</ul>\n<h3>lib</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"CompilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"es2015.promise\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>컴파일에 포함될 라이브러리 파일 목록을 지정해준다. 지정해주지 않으면 아래의 기본 값이 저장된다.</li>\n<li>ES5의 기본 값: dom, es5, scripthost</li>\n<li>ES6의 기본 값: dom, dom.iterable, es6, scripthost</li>\n<li>위의 기본 값 대신에 커스텀하게 라이브러리를 쓰려고 할 때, lib을 정의한다.</li>\n<li><a href=\"https://stackoverflow.com/questions/41993811/understanding-target-and-module-in-tsconfig\">Understanding “target” and “module” in tsconfig</a></li>\n</ul>\n<h3>outDir</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>컴파일된 파일들의 위치를 지정해준다.</li>\n</ul>\n<h3>outFile</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token property\">\"outFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>컴파일 결과물을 단일 파일로 떨궈준다.</li>\n</ul>\n<h3>module</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es3\"</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>컴파일된 모듈의 결과물을 어떤 모듈 시스템으로 할 지 결정한다.</p>\n<ul>\n<li>commonjs, amd, umd, system, es6, es2015, none 중 설정 가능.</li>\n<li>amd, systme 은 outFile 설정과 사용된다.</li>\n</ul>\n</li>\n<li>지정하지 않으면 target이 es6일 땐 es6으로, 그렇지 않으면 commonJS가 기본값으로 사용된다.</li>\n<li>es6, es2015는 target값이 es5 이하일때 사용 가능.</li>\n</ul>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://typescript-kr.github.io/pages/tsconfig.json.html\">TypeScript-Handbook 한글 문서 - tsconfig</a></li>\n<li><a href=\"https://typescript-kr.github.io/pages/Compiler%20Options.html\">TypeScript-Handbook 한글 문서 - 컴파일러 옵션</a></li>\n<li><a href=\"https://vomvoru.github.io/blog/tsconfig-compiler-options-kr/\">tsconfig 컴파일 옵션 정리</a></li>\n<li><a href=\"https://norux.me/59\">tsconfig.json의 lib</a></li>\n<li><a href=\"https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BD%94%EB%A6%AC%EC%95%84-1705-%EA%B8%B0%EC%B4%88-%EC%84%B8%EB%AF%B8%EB%82%98/lecture/6803\">타입스크립트 코리아 : 2017.05 기초 세미나 (4) - Compiler Options</a></li>\n</ul>","frontmatter":{"date":"2019년 05월 13일","description":"tsconfig.json의 옵션들을 간단하게 알아보았습니다.","path":"/front-end/typescript/compiler-option","title":"tsconfig.json"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}