{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/front-end/typescript/react-test","webpackCompilationHash":"8785a6d9f464df12dbe0","result":{"data":{"markdownRemark":{"html":"<p>개인 프로젝트를 작업 하고 있던 도중 테스트 환경을 도입해보고 싶어서 열심히 끄적이다가 기록을 남기기로 했다.\nTypeScript로 생성된 React 프로젝트에 테스트 환경 을 구축 해보고 테스트 까지 한번 해보자.</p>\n<p>해당 프로젝트는 create-react-app 으로 생성되었다.</p>\n<h2>테스트 환경 설정</h2>\n<pre><code>yarn add --dev jest @types/jest\nyarn add --dev enzyme enzyme-adapter-react-16\nyarn add --dev @types/enzyme @types/enzyme-adapter-react-16\n</code></pre>\n<p>먼저 테스트에 필요한 모듈들을 설치해주자. TypeScript 환경이기 때문에 각 모듈들의 @types도 설치해줘야 한다.</p>\n<pre><code>yarn add --dev enzyme-to-json @types/enzyme-to-json\n</code></pre>\n<p>스냅샷의 가독성을 위해 enzyme-to-json 모듈도 설치하였다.</p>\n<h3>setupTest.ts</h3>\n<pre><code class=\"language-javascript\">import * as Enzyme from \"enzyme\"\nimport ReactSixteenAdapter from \"enzyme-adapter-react-16\"\n\nEnzyme.configure({ adapter: new ReactSixteenAdapter() })\n</code></pre>\n<p>CRA로 만든 프로젝트라면 위의 소스 파일 처럼 테스트 설정을 해줘야 한다.\n테스트 파일 작성 중 계속 오류가 발생하길래 리서치를 하던 도중 <a href=\"https://github.com/Microsoft/TypeScript-React-Starter/issues/76#issuecomment-340544510\">여기에서</a> 제시했던 대로 파일을 작성하니 정상 작동 되었다.</p>\n<h3>package.json</h3>\n<pre><code class=\"language-json\">{\n  // ... 생략\n  \"jest\": {\n    // ... 생략\n    \"setupTestFrameworkScriptFile\": \"&#x3C;rootDir>/test/setupTest.ts\",\n    \"snapshotSerializers\": [\"enzyme-to-json/serializer\"]\n    // ... 생략\n  }\n  // ... 생략\n}\n</code></pre>\n<p>package.json 파일에 위에처럼 enzyme, enzyme-to-json을 위한 설정만 추가해주면 설정은 끝난다.</p>\n<h2>컴포넌트 작성</h2>\n<pre><code class=\"language-javascript\">import * as React from \"react\";\nimport classNames from \"classnames\";\nimport Portal from \"react-minimalist-portal\";\nimport ReactCSSTransitionGroup from \"react-addons-css-transition-group\";\n\nimport \"./Modal.scss\";\n\ninterface ModalProps {\n  backdropClassName: string;\n  children: React.ReactNode;\n  modalClassName: string;\n  isOpen: boolean;\n  onClose: any;\n  size: string;\n}\n\ninterface ModalStates {\n  isOpen: boolean;\n}\n\nexport default class Modal extends React.Component&#x3C;ModalProps, ModalStates> {\n  public static defaultProps = {\n    backdropClassName: \"\",\n    children: null,\n    modalClassName: \"\",\n    isOpen: false,\n    onClose: () => {},\n    size: \"sm\"\n  };\n\n  handleIgnoreEvent: any = event => {\n    event.stopPropagation();\n  };\n\n  handleClose: any = event => {\n    event.stopPropagation();\n\n    this.props.onClose();\n  };\n\n  render(): JSX.Element {\n    const {\n      backdropClassName,\n      children,\n      isOpen,\n      modalClassName,\n      onClose,\n      size\n    } = this.props;\n\n    if (!isOpen) {\n      return null;\n    }\n\n    return (\n      &#x3C;Portal>\n        &#x3C;div\n          className={classNames(\n            \"modal-backdrop\",\n            { open: isOpen },\n            backdropClassName\n          )}\n          onClick={onClose}\n        >\n          &#x3C;ReactCSSTransitionGroup\n            transitionName=\"example\"\n            transitionAppear={true}\n            transitionAppearTimeout={300}\n            transitionLeave={true}\n            transitionEnterTimeout={300}\n            transitionLeaveTimeout={500}\n          >\n            &#x3C;div\n              className={classNames(\"modal\", modalClassName, size)}\n              onClick={this.handleIgnoreEvent}\n            >\n              &#x3C;button type=\"button\" onClick={onClose}>\n                닫기\n              &#x3C;/button>\n              {children}\n            &#x3C;/div>\n          &#x3C;/ReactCSSTransitionGroup>\n        &#x3C;/div>\n      &#x3C;/Portal>\n    );\n  }\n}\n</code></pre>\n<p>간단하게 모달 컴포넌트를 작성했다. 이 모달 컴포넌트를 테스트 해 볼 것이다.</p>\n<h2>테스트코드 작성</h2>\n<pre><code class=\"language-javascript\">import * as React from \"react\"\nimport * as Enzyme from \"enzyme\"\nimport Modal from \"./Modal\"\n\ndescribe(\"&#x3C;Modal />\", () => {\n  let component = null\n  let isOpen = true\n\n  // 모달 컴포넌트 랜더링\n  it(\"Modal Render...\", () => {\n    component = Enzyme.shallow(\n      &#x3C;Modal\n        backdropClassName=\"test-backdrop\"\n        modalClassName=\"test-modal\"\n        isOpen={isOpen}\n        size=\"sm\"\n        onClose={() => {\n          isOpen = false\n        }}\n      >\n        &#x3C;div>Modal Test&#x3C;/div>\n      &#x3C;/Modal>\n    )\n\n    expect(component).toMatchSnapshot()\n  })\n})\n</code></pre>\n<p>맨 먼저 스냅샷 테스트코드를 작성했다.</p>\n<ul>\n<li>describe는 테스트 무리를 가지고 있는 함수이다. 두개의 parameter를 받는데 첫번째는 테스트에 붙이는 의미있는 이름이고 두번째는 여러개의 테스트를 포함한 함수이다. descirbe는 중첩해서 사용할 수도 있다.</li>\n<li>it은 테스트 자체가 되는 함수 이며 두개의 parameter를 받는다. 첫번째는 test의 이름이고 두번째는 테스트의 본문을 유지한다.</li>\n<li>expect는 여러 가지 유효성 검사기에 대한 액세스를 제공하여 여러 가지를 검증한다.</li>\n<li>shallow는 Enzyme에서 제공하는 rendering API 이다. rednering API에는 mount, render가 더 있는데 각각 작동하는 방식이 다르므로 <a href=\"https://medium.com/@Yohanna/difference-between-enzymes-rendering-methods-f82108f49084\">상황에 맞춰서 알맞은 것</a>을 골라서 사용하면 된다.</li>\n</ul>\n<pre><code class=\"language-javascript\">describe(\"&#x3C;Modal />\", () => {\n  // ... 생략\n\n  // 모달이 닫겨 있을 때\n  it(\"Modal close...\", () => {\n    component.setProps({ isOpen: false })\n\n    expect(component.find(\".modal-backdrop\").exists()).toBe(false)\n  })\n\n  // 모달이 열려 있을 때\n  it(\"Modal open...\", () => {\n    component.setProps({ isOpen: true })\n\n    expect(component.find(\".modal-backdrop\").exists()).toBe(true)\n  })\n\n  // ... 생략\n})\n</code></pre>\n<p>isOpen props를 받아서 모달의 출력 여부를 판단하므로 isOpen의 값에 따라 모달이 존재 하는지 안하는지 확인하는 테스트 코드를 작성 했다.\nisOpen이 false 일 때는 컴포넌트의 render 함수가 null을 리턴하므로 false 값이 나와야 하고 isOpen이 true 일 때는 모달이 정상적으로 출력되므로 true 값이 나와야 한다.</p>\n<ul>\n<li>toBe 메소드는 값이 예상한 값인지 확인한다.</li>\n<li>find 메소드는 인자로 받은 selector을 통하여 컴포넌트 안에서 특정 DOM을 찾을 수 있게 해준다.</li>\n<li>exists 메소드는 찾는 노드나 selector의 존재 유무를 판단해준다.</li>\n<li>setProps 메소드로 root 컴포넌트의 props를 설정하고 재랜더링 할 수 있다.</li>\n</ul>\n<pre><code class=\"language-javascript\">describe(\"&#x3C;Modal />\", () => {\n  // ... 생략\n\n  // 모달이 열려 있을 때\n  it(\"Modal open...\", () => {\n    component.setProps({ isOpen: true })\n\n    expect(component.find(\".modal-backdrop\").exists()).toBe(true)\n  })\n\n  // 모달 안을 클릭 했을 때\n  it(\"Modal click...\", () => {\n    component.find(\".modal\").simulate(\"click\", { stopPropagation() {} })\n\n    const lastChild = component\n      .find(\".modal\")\n      .children()\n      .last()\n\n    console.log(lastChild.debug())\n    lastChild.simulate(\"click\", { stopPropagation() {} })\n\n    expect(component.find(\".modal\").exists()).toBe(true)\n  })\n\n  // 모달 닫기 버튼을 눌러 닫을 때\n  it(\"Modal is closing...\", () => {\n    component.find(\"button\").simulate(\"click\")\n\n    expect(component.find(\".modal-backdrop\").exists()).toBe(false)\n  })\n})\n</code></pre>\n<p>이벤트가 발생했을 때 컴포넌트가 원하는 대로 작동하는지 확인하는 테스트 코드를 작성했다.\n모달이 출력되었을 때 모달 및 모달 안의 자식 DOM들을 클릭했을 때도 모달이 닫기면 안되기 때문에 모달 안의 DOM을 눌렀을 떄 모달이 닫기는지 안닫기는지 테스트 하고 있다.\n모달 안에서 닫기 버튼을 눌렀을 때는 모달이 닫겨야 하므로 버튼 테스트도 작성했다.\n모달 안의 DOM을 클릭 할 때 stopPropagation 이벤트가 발생하므로 가짜 함수를 추가 하였다.(<a href=\"https://github.com/airbnb/enzyme/issues/323\">참조</a>)</p>\n<ul>\n<li>debug 메소드는 디버깅 목적으로 HTML과 유사한 wrapper 문자열을 반환한다.</li>\n<li>simulate 메소드는 이벤트를 시뮬레이션 한다. 첫번째 파라미터는 시뮬레이터 할 이벤트 이름을 넣고 두번째 파라미터에는 이벤트에 전달 되는 모의 이벤트 객체가 들어간다.</li>\n</ul>\n<h2>테스트</h2>\n<pre><code>yarn run test\n</code></pre>\n<p>위의 명령어로 테스트를 실행할 수 있다.</p>\n<p><img src=\"/images/frontend/typescript-react-test-1.png\" alt=\"스냅샷 생성\">\n테스트를 실행하면 스냅샷 폴더가 생긴다.</p>\n<pre><code class=\"language-javascript\">// Jest Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`&#x3C;Modal /> Modal Render... 1`] = `\n&#x3C;Portal>\n  &#x3C;div\n    className=\"modal-backdrop open test-backdrop\"\n    onClick={[Function]}\n  >\n    &#x3C;CSSTransitionGroup\n      transitionAppear={true}\n      transitionAppearTimeout={300}\n      transitionEnter={true}\n      transitionEnterTimeout={300}\n      transitionLeave={true}\n      transitionLeaveTimeout={500}\n      transitionName=\"example\"\n    >\n      &#x3C;div\n        className=\"modal test-modal sm\"\n        onClick={[Function]}\n      >\n        &#x3C;button\n          onClick={[Function]}\n          type=\"button\"\n        >\n          닫기\n        &#x3C;/button>\n        &#x3C;div>\n          Modal Test\n        &#x3C;/div>\n      &#x3C;/div>\n    &#x3C;/CSSTransitionGroup>\n  &#x3C;/div>\n&#x3C;/Portal>\n`\n</code></pre>\n<p>이런식으로 스냅샷이 생성된다.</p>\n<p><img src=\"/images/frontend/typescript-react-test-2.png\" alt=\"테스트 성공\">\n테스트에 성공하면 위의 스샷 처럼 성공 메시지들이 출력된다.\ndebug로 child elements가 제대로 출력되는지 console.log를 찍었기 떄문에 console.log 결과물이 같이 출력되었다.</p>\n<p><img src=\"/images/frontend/typescript-react-test-3.png\" alt=\"테스트 실패\">\n테스트에 실패하면 실패한 테스트 코드 위치와 원하는 테스트 값, 실제로 나온 테스트 결과값을 보여준다.</p>\n<h2>마무리</h2>\n<p>테스트코드를 작성해본건 이번이 처음이라 틀린 부분이 있을 수도 있다 ㅠ. 이번 포스팅을 기회로 테스트 습관을 들이도록 노력해봐야겠다.</p>\n<p>수정해야 할 부분이나 보완되어야 할 부분이 있으면 언제든 피드백 부탁드립니다.</p>\n<p><a href=\"https://github.com/partyKyoung/wolfOnAir-front/tree/master/src/components/ui/Modal\">소스 코드 전체 보기</a></p>\n<h2>Reference</h2>\n<p><a href=\"https://rjzaworski.com/2018/03/testing-with-typescript-react-and-enzyme\">Testing with TypeScript, Enzyme, and React</a>\n<a href=\"https://airbnb.io/enzyme/\">Enzyme</a>\n<a href=\"https://medium.com/@sangboaklee/react-%ED%85%8C%EC%8A%A4%ED%8C%85-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0-1c3719cee5af\">[React] 테스팅 코드 작성하기</a></p>","frontmatter":{"date":"February 14, 2019","path":"/front-end/typescript/react-test","title":"TypeScript로 생성한 React 프로젝트에서 테스트 환경 구축 및 테스트 실행하기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}